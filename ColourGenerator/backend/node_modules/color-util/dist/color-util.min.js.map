{"version":3,"sources":["webpack://colorutil/webpack/universalModuleDefinition","webpack://colorutil/webpack/bootstrap","webpack://colorutil/./src/Utils.js","webpack://colorutil/./src/types/Rgb.js","webpack://colorutil/./src/Gradient.js","webpack://colorutil/./src/gradientData/GradientData.js","webpack://colorutil/./src/gradientData/GradientDataUtil.js","webpack://colorutil/./src/ConversionUtil.js","webpack://colorutil/./src/types/types.js","webpack://colorutil/./src/types/shared.js","webpack://colorutil/./src/types/Hsl.js","webpack://colorutil/./src/Repeat.js","webpack://colorutil/./src/ColorUtil.js","webpack://colorutil/./src/gradientData/GradientDataFlat1D.js","webpack://colorutil/./src/gradientData/GradientDataObject2D.js","webpack://colorutil/./src/gradientData/GradientDataArray2D.js","webpack://colorutil/./src/gradientData/GradientDataFlat2D.js","webpack://colorutil/./src/Color.js","webpack://colorutil/./src/types/Int.js","webpack://colorutil/./src/types/Hex.js","webpack://colorutil/./src/types/Cssrgb.js","webpack://colorutil/./src/types/Cssrgba.js","webpack://colorutil/./src/types/Csshsl.js","webpack://colorutil/./src/types/Csshsla.js","webpack://colorutil/./src/types/Hsv.js","webpack://colorutil/./src/types/Intabgr.js","webpack://colorutil/./src/types/Intrgba.js","webpack://colorutil/./src/types/Any.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","this","noop","obj","path","defaultValue","parts","Array","isArray","split","length","first","shift","has","set","next","isNumeric","clone","JSON","parse","stringify","includes","indexOf","entries","isObject","isNumber","isNaN","parseInt","getFindMatcher","matcher","newMatcher","isPropertyMatcher","isPropertyValueMatcher","index","findIndex","array","startIndex","findLastIndex","find","findLast","findPropertyIndex","data","item","findLastPropertyIndex","pull","splice","lowerFirst","string","charAt","toLowerCase","substring","forEach","callback","map","result","push","keys","sortBy","field","sort","a","b","value1","value2","undefined","DEFAULT_COLOR","g","Rgb","className","parent","test","color","gradient","options","Gradient","createGradient","mixColors","mix","defaultColor","gradientData","GradientData","draw","target","getCanvasGradient","canvas","getCanvasTarget","width","height","ctx","getContext","imageData","createImageData","buffer","uint32View","Uint32Array","uint8CView","Uint8ClampedArray","x","y","to","intabgr","putImageData","hueColors","hue","rgb","partialGradient","hsv","h","item1","item2","position","color1","color2","int","hex","toString","slice","cssrgb","Math","round","cssrgba","uintabgr","uintabgrOpaque","uintrgba","intabgrOpaque","intrgba","hsl","max","min","delta","luminosity","saturation","abs","v","PI2","PI","typeOptions","type","_","verify","onValidationComplete","fn","colors","matrix","object2d","flat1d","centerX","centerY","circularMatrixGradient","circularGradient","linearMatrixGradient","linearGradient","scaleX","scale","scaleY","sizeX","sizeY","translateX","translateY","centralize","gradientFunctionOptions","rotation","repeatX","Repeat","repeat","repeatY","lastIndex","itemIndex","partSize","positionBetweenItems","partialGradientWithStops","axis","radian","cos","sin","dx","dy","gradients","parts1","parts2","tx","ty","angle","atan2","distance","sqrt","GRADIENT_DATA_TYPES","GradientDataFlat1D","GradientDataObject2D","GradientDataArray2D","GradientDataFlat2D","Error","dataType","_getDataTypeFromFirstSample","toFlat1d","toObject2d","toFlat2d","flat2d","toArray2d","array2d","testStructure","validatorClass","_verifyExpectedDataStructureInAllSamples","sample","testStructureSingleSample","addMissingStops","firstProperty","firstItem","newItem","unshift","lastProperty","lastItem","start","end","_addStopsBetweenIndexes","endIndex","startStop","steps","stepSize","conversionFunctions","convert","reduce","acc","targetType","availableTypes","getColorType","_getConversionPathThroughParentType","types","sourcePath","_getPathToRoot","targetPath","reverse","sourceRootType","targetRootType","rootTypesAreSame","rootTypesAreLinked","combined","concat","nextType","currentType","TYPES","Int","Hex","Hsl","Hsv","Cssrgba","Cssrgb","Csshsla","Csshsl","TYPES_ALL","Intabgr","Intrgba","HTMLCanvasElement","document","querySelector","csshsl","csshsla","none","stop","arrayBuffer","uint8Array","uint16Array","SYSTEM_ENDIAN","ArrayBuffer","Uint8Array","Uint16Array","UNKNOW_ENDIAN","colorutil","any","Any","endian","ConversionUtil","colorType","Color","_testStructureAllSamples","GradientDataUtil","addDefaultColors","subSamples","isValid","subSample","addMissingStopsXY","addDefaultColorsForMatrix","row","prevY","existing","_primaryColor","_cache","_cloneCache","hueValue","_cacheValue","id","getCachedValue","cache","typeName","convertAny","REG_HEX_SHORT","REG_HEX","exec","replace","REG_RGB","REG_RGBA","parseFloat","REG_HSL","REG_HSLA"],"mappings":"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","file":"color-util.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"colorutil\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"colorutil\"] = factory();\n\telse\n\t\troot[\"colorutil\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","\r\nmodule.exports = new function() {\r\n\r\n    this.noop = () => {};\r\n\r\n    this.get = (obj, path, defaultValue) => {\r\n\r\n        let parts = Array.isArray(path) ? path : path.split('.');\r\n\r\n        if (!parts.length) {\r\n\r\n            return obj;\r\n        }\r\n\r\n        let first = parts.shift();\r\n\r\n        if (obj && obj.hasOwnProperty(first)) {\r\n\r\n            return this.get(obj[first], parts, defaultValue);\r\n        }\r\n\r\n        return defaultValue;\r\n    };\r\n\r\n    this.has = (obj, path) => {\r\n\r\n        let parts = Array.isArray(path) ? path : path.split('.');\r\n\r\n        if (!parts.length) {\r\n\r\n            return true;\r\n        }\r\n\r\n        let first = parts.shift();\r\n\r\n        if (obj && obj.hasOwnProperty(first)) {\r\n\r\n            return this.has(obj[first], parts);\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    this.set = (obj, path, value) => {\r\n\r\n        let parts = Array.isArray(path) ? path : path.split('.');\r\n        let first = parts.shift();\r\n\r\n        if (!parts.length) {\r\n\r\n            obj[first] = value;\r\n\r\n            return;\r\n        }\r\n\r\n        if (!obj.hasOwnProperty(first)) {\r\n\r\n            let next = parts[0];\r\n\r\n            obj[first] = this.isNumeric(next) ? [] : {};\r\n        }\r\n\r\n        this.set(obj[first], parts, value);\r\n    };\r\n\r\n    this.clone = (obj) => {\r\n\r\n        return JSON.parse(JSON.stringify(obj));\r\n    };\r\n\r\n    this.includes = (obj, value) => {\r\n\r\n        if (Array.isArray(obj)) {\r\n\r\n            return obj.indexOf(value) > -1;\r\n        }\r\n\r\n        for (const [key, val] of Object.entries(obj)) {\r\n\r\n            if (value === val) {\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    this.isObject = (value) => {\r\n\r\n        return value !== null && typeof value === 'object' && !Array.isArray(value);\r\n    };\r\n\r\n    this.isNumber = (value) => {\r\n\r\n        return typeof value === 'number' && !isNaN(value);\r\n    };\r\n\r\n    this.isNumeric = (value) => {\r\n\r\n        return !isNaN(parseInt(value));\r\n    };\r\n\r\n    const getFindMatcher = (matcher) => {\r\n\r\n        let newMatcher = matcher;\r\n        let isPropertyMatcher = (Array.isArray(matcher) && matcher.length === 1) ||\r\n                typeof matcher === 'string';\r\n        let isPropertyValueMatcher = (Array.isArray(matcher) && matcher.length > 1);\r\n\r\n        if (isPropertyMatcher) {\r\n\r\n            let m = Array.isArray(matcher) ? matcher[0] : matcher;\r\n\r\n            newMatcher = (value, index) => {\r\n\r\n                return this.has(value, m);\r\n            }\r\n\r\n        } else if (isPropertyValueMatcher) {\r\n\r\n            newMatcher = (value, index) => {\r\n\r\n                return this.get(value, matcher[0]) === matcher[1];\r\n            }\r\n        }\r\n\r\n        return newMatcher;\r\n    };\r\n\r\n    this.findIndex = (array, matcher, startIndex) => {\r\n\r\n        startIndex = startIndex || 0;\r\n\r\n        let newMatcher = getFindMatcher(matcher);\r\n\r\n        if (startIndex < 0) {\r\n\r\n            startIndex = array.length + startIndex;\r\n        }\r\n\r\n        for (let i = startIndex; i < array.length; i++) {\r\n\r\n            if (newMatcher(array[i], i)) {\r\n\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    };\r\n\r\n    this.findLastIndex = (array, matcher, startIndex) => {\r\n\r\n        startIndex = this.isNumber(startIndex) ? startIndex : array.length - 1;\r\n\r\n        let newMatcher = getFindMatcher(matcher);\r\n\r\n        if (startIndex < 0) {\r\n\r\n            startIndex = array.length + startIndex;\r\n        }\r\n\r\n        for(let i = startIndex; i > -1; i--) {\r\n\r\n            if (newMatcher(array[i], i)) {\r\n\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    };\r\n\r\n    this.find = (array, matcher, startIndex) => array[this.findIndex(array, matcher, startIndex)];\r\n    this.findLast = (array, matcher, startIndex) => array[this.findLastIndex(array, matcher, startIndex)];\r\n\r\n    this.findPropertyIndex = (data, property, startIndex=0) => {\r\n\r\n        return this.findIndex(data, (item) => {\r\n\r\n            return this.has(item, property);\r\n\r\n        }, startIndex);\r\n    };\r\n\r\n    this.findLastPropertyIndex = (data, property, startIndex) => {\r\n\r\n        startIndex = startIndex || data.length-1;\r\n\r\n        return this.findLastIndex(data, (item) => {\r\n\r\n            return this.has(item, property);\r\n\r\n        }, startIndex);\r\n    };\r\n\r\n    this.pull = (array, value) => {\r\n\r\n        let index;\r\n\r\n        if (!array) {\r\n\r\n            return;\r\n        }\r\n\r\n        while (array.indexOf(value) > -1) {\r\n\r\n            index = array.indexOf(value);\r\n\r\n            if (index > -1) {\r\n\r\n                array.splice(index, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    this.lowerFirst = (string) => {\r\n\r\n        if (!string) {\r\n\r\n            return string;\r\n        }\r\n\r\n        let char = string.charAt(0).toLowerCase();\r\n\r\n        return char + string.substring(1);\r\n    };\r\n\r\n    this.forEach = (data, callback) => {\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n\r\n            let item = data[i];\r\n\r\n            callback(item, i);\r\n        }\r\n    };\r\n\r\n    this.map = (data, callback) => {\r\n\r\n        let result = [];\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n\r\n            let item = data[i];\r\n\r\n            if (typeof callback === 'string') {\r\n\r\n                result.push(this.get(item, callback));\r\n\r\n            } else {\r\n\r\n                result.push(callback(item, i));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    this.keys = (data) => {\r\n\r\n        if (!data) {\r\n\r\n            return [];\r\n        }\r\n\r\n        return Object.keys(data);\r\n    };\r\n\r\n    this.sortBy = (data, field) => {\r\n\r\n        if (!Array.isArray(data)) {\r\n\r\n            return data;\r\n        }\r\n\r\n        return data.sort((a, b) => {\r\n\r\n            let value1 = a[field];\r\n            let value2 = b[field];\r\n\r\n            // place missing ones to the bottom\r\n            if (value1 === undefined) {\r\n\r\n                return 1;\r\n            }\r\n\r\n            if (value2 === undefined) {\r\n\r\n                return -1;\r\n            }\r\n\r\n            if (value1 < value2) {\r\n\r\n                return -1\r\n            }\r\n\r\n            if (value1 > value2) {\r\n\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n    };\r\n};","\r\nimport Gradient from '../Gradient';\r\nimport GradientData from '../gradientData/GradientData';\r\nimport { getCanvasGradient, getCanvasTarget } from './shared.js';\r\n\r\nconst INT32_ALPHA_LE = (0xFF << 24) >>> 0;\r\n\r\nconst DEFAULT_COLOR = {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    a: 255\r\n};\r\n\r\n/**\r\n * Rgb conversion functions\r\n *\r\n * Rgb object notation is `{r:RRR, g:GGG, b:BBB, a:AAA}` where each color component\r\n * (red, grean, blue, alpha) range is 0-255. In some conversion functions\r\n * alpha is not required. In those where it is required and not present in\r\n * rgb object, a fully opaque value is used as a default.\r\n *\r\n * @namespace rgb\r\n * @memberof colorutil\r\n */\r\nlet Rgb = new function() {\r\n\r\n    this.name = 'rgb';\r\n    this.className = 'Rgb';\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.rgb\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    this.test = color => {\r\n        return color !== null &&\r\n            typeof color === 'object' &&\r\n            color.hasOwnProperty('r') &&\r\n            color.hasOwnProperty('g') &&\r\n            color.hasOwnProperty('b') &&\r\n            (color.r >= 0 && color.r <= 255) &&\r\n            (color.g >= 0 && color.g <= 255) &&\r\n            (color.b >= 0 && color.b <= 255) &&\r\n            (color.hasOwnProperty('a') ? (color.a >= 0 && color.a <= 255) : true);\r\n    };\r\n\r\n    /**\r\n     * Creates a gradient.\r\n     *\r\n     * @memberof colorutil.rgb\r\n     *\r\n     * @param      {Object}    options                              Options\r\n     * @param      {Array|GradientData}     options.colors          Array of colors or instance of GradientData. There are multiple types of data structures. Data structure\r\n     *                                                              defines whether the gradient is one or two-dimensional.\r\n     * @param      {string}    [options.type='linear']              Gradient type: linear | circular\r\n     * @param      {boolean}   [options.verify=false]               Verify that each of the colors in colors property have valid data structure.\r\n     *                                                              If set to true, createGradient will throw an error if data structure is not correct.\r\n     *                                                              Data structure is tested from one sample to identify the data structure. This does not\r\n     *                                                              affect that behavior.\r\n     * @param      {boolean}   [options.validate=true]              Validate and add missing color stops and convert colors data structure to internal data structure\r\n     * @param      {function}  [options.defaultColor={r:0,g:0,b:0,a:255}] Default color used to fill the missing color components in gradient colors.\r\n     *                                                              If options.colors is GradientData, specify the defaultColor for GradientData instead.\r\n     * @param      {number}    [options.width=100]                  Set size of the gradient in pixels.\r\n     * @param      {number}    [options.height=100]                 Set size of the gradient in pixels.\r\n     * @param      {number}    [options.centerX=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the left edge of the gradient and 1 is the right edge.\r\n     *                                                              centerX can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.centerY=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the top edge of the gradient and 1 is the bottom edge.\r\n     *                                                              centerY can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.scale=1]                    Scale of the gradient. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleX=1]                   Scale of the gradient on x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleY=1]                   Scale of the gradient on y axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateX=0]               Translate gradient along x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateY=0]               Translate gradient along y axis. Value in range 0 to 1.\r\n     * @param      {boolean}   [options.centralize=false]           Overrides translate values and automatically adjusts the positioning to the center.\r\n     * @param      {number}    [options.rotation=0]                 Rotation of the gradient. Value in range 0 to 1.\r\n     * @param      {function}  [options.repeatX=colorutil.repeat.repeat] X repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     * @param      {function}  [options.repeatY=colorutil.repeat.repeat] Y repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     *\r\n     * @return     {function}  Function that calculates a color for a single point on gradient. Accepts x and y parameters.\r\n     *                         Though the x and y may exceed the limit, but gradient repeat will take effect.\r\n     */\r\n    this.gradient = (options) => {\r\n\r\n        return Gradient.createGradient(options, {\r\n\r\n            mixColors: this.mix,\r\n            defaultColor: DEFAULT_COLOR\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a gradient data object which allows conversion\r\n     * between the supported data structures\r\n     *\r\n     * @memberof colorutil.rgb\r\n     *\r\n     * @param      {Array}          data            Array of colors. There are multiple types of data structures.\r\n     * @param      {Object}         [defaultColor={r:0,g:0,b:0,a:255}]  The default color\r\n     * @return     {GradientData}\r\n     */\r\n    this.gradientData = (data, defaultColor) => {\r\n\r\n        defaultColor = defaultColor || DEFAULT_COLOR;\r\n\r\n        return new GradientData(data, defaultColor);\r\n    };\r\n\r\n    /**\r\n     * Draw a gradient on canvas\r\n     *\r\n     * @param      {HTMLCanvasElement|string}   target   The canvas on which gradient is drawn. Target may be canvas or css selector to canvas (evaluated with querySelector)\r\n     * @param      {Object|Function}            options  Options of gradient or gradient function\r\n     */\r\n    this.draw = (target, options) => {\r\n\r\n        let gradient = getCanvasGradient(this, options);\r\n        let canvas = getCanvasTarget(target);\r\n\r\n        if (canvas && gradient) {\r\n\r\n            let width = canvas.width;\r\n            let height = canvas.height;\r\n            let ctx = canvas.getContext('2d');\r\n            let imageData  = ctx.createImageData(width, height);\r\n            let buffer = imageData.data.buffer;\r\n            let uint32View = new Uint32Array(buffer);\r\n            let uint8CView = new Uint8ClampedArray(buffer);\r\n\r\n            for (let x = 0; x < width; x++) {\r\n\r\n                for(let y = 0; y < height; y++) {\r\n\r\n                    uint32View[y * width + x] = this.to.intabgr(gradient(x, y));\r\n                }\r\n            }\r\n\r\n            imageData.data.set(uint8CView);\r\n\r\n            ctx.putImageData(imageData, 0, 0);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @memberof colorutil.rgb\r\n     *\r\n     * @return     {Array} Array of hue colors\r\n     */\r\n    this.hueColors = () => {\r\n        return [\r\n            {a: 255, b: 0, g: 0, r: 255},\r\n            {a: 255, b: 0, g: 255, r: 255},\r\n            {a: 255, b: 0, g: 255, r: 0},\r\n            {a: 255, b: 255, g: 255, r: 0},\r\n            {a: 255, b: 255, g: 0, r: 0},\r\n            {a: 255, b: 255, g: 0, r: 255},\r\n            {a: 255, b: 0, g: 0, r: 255}\r\n        ];\r\n    };\r\n\r\n    /**\r\n     * @memberof colorutil.rgb\r\n     *\r\n     * @param      {Object}  rgb     Rgb object\r\n     * @return     {Object}  hue color in Rgb object notation\r\n     */\r\n    this.hue = (rgb) => {\r\n\r\n        let parts = Gradient.partialGradient(Rgb.hueColors(), Rgb.to.hsv(rgb).h);\r\n\r\n        return this.mix(\r\n            parts.item1,\r\n            parts.item2,\r\n            parts.position);\r\n    };\r\n\r\n    /**\r\n     * Mix two colors. This function has no checking if values are correct.\r\n     *\r\n     * @memberof colorutil.rgb\r\n     * @private\r\n     *\r\n     * @param      {Object} color1    Rgb color\r\n     * @param      {Object} color2    Rgb color\r\n     * @param      {number} position  Position between colors. A value in range 0 - 1\r\n     * @return     {Object}\r\n     */\r\n    this.mix = (color1, color2, position) => {\r\n\r\n        return {\r\n            r: color1.r - position * (color1.r - color2.r),\r\n            g: color1.g - position * (color1.g - color2.g),\r\n            b: color1.b - position * (color1.b - color2.b),\r\n            a: color1.a - position * (color1.a - color2.a)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.rgb\r\n     */\r\n    this.to = {\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to 24-bit number `0xRRGGBB`. Alpha is ignored.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.int({r: 0, g: 128, b: 255});\r\n         * // output: 33023\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {number}\r\n         */\r\n        int: rgb => {\r\n            return rgb.r << 16 | rgb.g << 8 | rgb.b;\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to 24-bit hex string `'#RRGGBB'`. Alpha is ignored.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.hex({r: 0, g: 128, b: 255});\r\n         * // output: \"#0080ff\"\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {string}\r\n         */\r\n        hex: rgb => {\r\n            // e.g. (10<<8).toString(16) equals A00, but we need to write this in format 0A00\r\n            // by adding 1<<16 (10000) to the result and removing the first digit\r\n            // we have produced 0A00 like this: ((1<<16) + (10<<8)).toString(16).slice(1)\r\n            return '#' + ((1 << 24) | (rgb.r << 16) | (rgb.g << 8) | rgb.b)\r\n                .toString(16).slice(1);\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB}` to rgb functional notation string `'rgb(RRR,GGG,BBB)'`.\r\n         * Alpha is converted from range 0-255 to 0-1.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.cssrgb({r: 0, g: 128, b: 255});\r\n         * // output: \"rgb(0,128,255)\"\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {string}\r\n         */\r\n        cssrgb: rgb => {\r\n            return `rgb(${Math.round(rgb.r)},${Math.round(rgb.g)},${Math.round(rgb.b)})`;\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to rgb functional notation string `'rgba(RRR,GGG,BBB,A)'`.\r\n         * Alpha is converted from range 0-255 to 0-1.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.cssrgba({r: 0, g: 128, b: 255, a: 85});\r\n         * // output: \"rgba(0,128,255,0.3333333333333333)\"\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {string}\r\n         */\r\n        cssrgba: rgb => {\r\n            return `rgba(${Math.round(rgb.r)},${Math.round(rgb.g)},${Math.round(rgb.b)},${rgb.a/0xFF})`;\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to 32-bit number `0xAABBGGRR` (little-endian)\r\n         * Resulting value is positive\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.uintabgr({r: 0, g: 128, b: 255, a: 255});\r\n         * // output: 4294934528\r\n         * colorutil.rgb.to.uintabgr({r: 0, g: 128, b: 255, a: 85});\r\n         * // output: 1442807808\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {number}\r\n         */\r\n        uintabgr: rgb => {\r\n            return (rgb.a << 24 | rgb.b << 16 | rgb.g << 8 | rgb.r) >>> 0\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB}` to 32-bit number `0xAABBGGRR` (little-endian)\r\n         * Alpha value is discarded and fully opaque value is used. Resulting value is positive\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.uintabgrOpaque({r: 0, g: 128, b: 255})\r\n         * // output: 4294934528\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {number}\r\n         */\r\n        uintabgrOpaque: rgb => {\r\n            return (INT32_ALPHA_LE | rgb.b << 16 | rgb.g << 8 | rgb.r) >>> 0\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to 32-bit number `0xRRGGBBAA` (big-endian)\r\n         * Resulting value is positive\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.uintrgba({r: 0, g: 128, b: 255, a: 255});\r\n         * // output: 8454143\r\n         * colorutil.rgb.to.uintrgba({r: 0, g: 128, b: 255, a: 85});\r\n         * // output: 8453973\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {number}\r\n         */\r\n        uintrgba: rgb => {\r\n            return (rgb.r << 24 | rgb.g << 16 | rgb.b << 8 | rgb.a) >>> 0;\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to 32-bit number `0xAABBGGRR` (little-endian)\r\n         * Resulting value can be negative.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.intabgr({r: 0, g: 128, b: 255, a: 255});\r\n         * // output: -32768\r\n         * colorutil.rgb.to.intabgr({r: 0, g: 128, b: 255, a: 85});\r\n         * // output: 1442807808\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {number}\r\n         */\r\n        intabgr: rgb => {\r\n            return rgb.a << 24 | rgb.b << 16 | rgb.g << 8 | rgb.r;\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB}` to 32-bit number `0xAABBGGRR` (little-endian)\r\n         * Alpha value is discarded and fully opaque value is used. Resulting value can be negative.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.intabgrOpaque({r: 0, g: 128, b: 255})\r\n         * // output: -32768\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {number}\r\n         */\r\n        intabgrOpaque: rgb => {\r\n            return INT32_ALPHA_LE | rgb.b << 16 | rgb.g << 8 | rgb.r;\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to 32-bit number `0xRRGGBBAA` (big-endian).\r\n         * Resulting value can be negative.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.intrgba({r: 0, g: 128, b: 255, a: 255});\r\n         * // output: 8454143\r\n         * colorutil.rgb.to.intrgba({r: 0, g: 128, b: 255, a: 85});\r\n         * // output: 8453973\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {number}\r\n         */\r\n        intrgba: rgb => {\r\n            return rgb.r << 24 | rgb.g << 16 | rgb.b << 8 | rgb.a;\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to hsl object `{h:H, s:S, l:L, a:A}`\r\n         * where h, s, l, a (saturation, luminosity, alpha) are in range 0-1.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.hsl({r: 255, g: 0, b: 0, a: 255});\r\n         * // output: {h: 0, s: 1, l: 0.5, a: 1}\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {Object}\r\n         */\r\n        hsl: rgb => {\r\n            let {r:r, g:g, b:b, a:a} = rgb;\r\n\r\n            r /= 0xFF;\r\n            g /= 0xFF;\r\n            b /= 0xFF;\r\n            a = !isNaN(parseInt(a)) ? a / 0xFF : 1;\r\n\r\n            let max = Math.max(r, g, b);\r\n            let min = Math.min(r, g, b);\r\n            let delta = max - min;\r\n            let luminosity = (max + min) / 2;\r\n            let saturation = 0;\r\n            let hue = 0;\r\n\r\n            if (delta > 0) {\r\n                saturation = delta / (1 - Math.abs(luminosity * 2 - 1));\r\n\r\n                if (b === max) {\r\n                    hue = ((r - g) / delta) + 4;\r\n\r\n                } else if (g === max) {\r\n                    hue = ((b - r) / delta) + 2;\r\n\r\n                } else if (r === max) {\r\n                    hue = ((g - b) / delta) + (g < b ? 6 : 0);\r\n                    // or this one\r\n                    // hue = ((g - b) / delta) % 6;\r\n\r\n                    // TODO: check why this is here and not after hue *= 60 statement and why unit tests don't break when removing\r\n                    if (hue < 0) {\r\n                        hue += 360;\r\n                    }\r\n                }\r\n\r\n                hue /= 6;\r\n            }\r\n\r\n            return {\r\n                h: hue,\r\n                s: saturation,\r\n                l: luminosity,\r\n                a: a\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Convert rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}` to hsv object `{h:H, s:S, v:V, a:A}`\r\n         * where h, s, v, a (hue, saturation, value, alpha) are in range 0-1.\r\n         *\r\n         * @example\r\n         * colorutil.rgb.to.hsv({r: 255, g: 0, b: 0, a: 255});\r\n         * // output: {h: 0, s: 1, v: 1, a: 1}\r\n         *\r\n         * @memberof colorutil.rgb.to\r\n         *\r\n         * @param      {Object}    rgb\r\n         * @return     {Object}\r\n         */\r\n        hsv: rgb => {\r\n            let {r:r, g:g, b:b, a:a} = rgb;\r\n\r\n            r /= 0xFF;\r\n            g /= 0xFF;\r\n            b /= 0xFF;\r\n            a = !isNaN(parseInt(a)) ? a / 0xFF : 1;\r\n\r\n            let max = Math.max(r, g, b);\r\n            let min = Math.min(r, g, b);\r\n            let delta = max - min;\r\n            let saturation = 0;\r\n            let hue = 0;\r\n\r\n            if (delta > 0) {\r\n                saturation = delta / max;\r\n\r\n                if (b === max) {\r\n                    hue = ((r - g) / delta) + 4;\r\n\r\n                } else if (g === max) {\r\n                    hue = ((b - r) / delta) + 2;\r\n\r\n                } else if (r === max) {\r\n                    hue = ((g - b) / delta) + (g < b ? 6 : 0);\r\n                    // or this one\r\n                    // hue = ((g - b) / delta) % 6;\r\n\r\n                    if (hue < 0) {\r\n                        hue += 360;\r\n                    }\r\n                }\r\n\r\n                hue /= 6;\r\n            }\r\n\r\n            return {\r\n                h: hue,\r\n                s: saturation,\r\n                v: max,\r\n                a: a\r\n            }\r\n        }\r\n    };\r\n}();\r\n\r\nexport default Rgb;","\r\nimport _ from './Utils';\r\nimport Repeat from './Repeat';\r\nimport GradientData from './gradientData/GradientData';\r\n\r\nexport default new function() {\r\n\r\n    const PI2 = Math.PI * 2;\r\n\r\n    /**\r\n     * Creates a gradient.\r\n     *\r\n     * @param      {Object}    options                              Options provided by user\r\n     * @param      {Array}     options.colors                       Array of colors or instance of GradientData. There are multiple types of data structures. Data structure\r\n     *                                                              defines whether the gradient is one or two dimensional.\r\n     * @param      {string}    [options.type='linear']              Gradient type: linear | circular\r\n     * @param      {boolean}   [options.verify=false]               Verify that each of the colors in colors property have valid data structure.\r\n     *                                                              If set to true, createGradient will throw an error if data structure is not correct.\r\n     *                                                              Data structure is tested from one sample to identify the data structure. This does not\r\n     *                                                              affect that behavior.\r\n     * @param      {boolean}   [options.validate=true]              Validate and add missing color stops and convert colors data structure to internal data structure\r\n     * @param      {function}  [options.defaultColor={h:0,s:0,v:0,a:1}] Default color used to fill the missing color components in gradient colors.\r\n     *                                                              If options.colors is GradientData, specify the defaultColor for GradientData instead.\r\n     * @param      {number}    [options.width=100]                  Set size of the gradient in pixels.\r\n     * @param      {number}    [options.height=100]                 Set size of the gradient in pixels.\r\n     * @param      {number}    [options.centerX=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the left edge of the gradient and 1 is the right edge.\r\n     *                                                              centerX can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.centerY=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the top edge of the gradient and 1 is the bottom edge.\r\n     *                                                              centerY can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.scale=1]                    Scale of the gradient. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleX=1]                   Scale of the gradient on x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleY=1]                   Scale of the gradient on y axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateX=0]               Translate gradient along x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateY=0]               Translate gradient along y axis. Value in range 0 to 1.\r\n     * @param      {boolean}   [options.centralize=false]           Overrides translate values and automatically adjusts the positioning to the center.\r\n     * @param      {number}    [options.rotation=0]                 Rotation of the gradient. Value in range 0 to 1.\r\n     * @param      {function}  [options.repeatX=ColorUtil.repeat.repeat] X repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     * @param      {function}  [options.repeatY=ColorUtil.repeat.repeat] Y repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     *\r\n     * @param      {Object}    typeOptions                          Options provided by the color type\r\n     * @param      {Object}    typeOptions.defaultColor             Default color used to fill the missing color components in gradinet colors.\r\n     *                                                              User options override this.\r\n     * @param      {function}  typeOptions.mixColors                Function calculating the mix of two colors\r\n     * @return     {function}  Function that calculates a color for a single point on gradient. Accepts x and y parameters.\r\n     *                         Though the x and y may exceed the limit, but gradient repeat will take effect.\r\n     * @private\r\n     */\r\n    this.createGradient = (options, typeOptions={}) => {\r\n\r\n        options = options || {};\r\n\r\n        let type = _.includes(['linear', 'circular'], options.type) ? options.type : 'linear';\r\n        let verify = _.get(options, 'verify', false);\r\n        let validate = _.get(options, 'validate', true);\r\n        let onValidationComplete = options.onValidationComplete || _.noop;\r\n        let fn = null;\r\n        let gradientData = null;\r\n\r\n        if (options.colors instanceof GradientData) {\r\n\r\n            gradientData = options.colors;\r\n\r\n        } else {\r\n\r\n            let defaultColor = options.defaultColor || typeOptions.defaultColor;\r\n\r\n            gradientData = new GradientData(options.colors, defaultColor);\r\n        }\r\n\r\n        if (verify) {\r\n\r\n            gradientData.verify();\r\n        }\r\n\r\n        let colors = gradientData.matrix ? gradientData.object2d : gradientData.flat1d;\r\n\r\n        onValidationComplete(colors);\r\n\r\n        let centerX = 0;\r\n        let centerY = 0;\r\n\r\n        if (type === 'circular') {\r\n\r\n            fn = gradientData.matrix ? this.circularMatrixGradient : this.circularGradient;\r\n\r\n        } else {\r\n\r\n            centerX = options.centerX || 0;\r\n            centerY = options.centerY || 0;\r\n\r\n            fn = gradientData.matrix ? this.linearMatrixGradient : this.linearGradient;\r\n        }\r\n\r\n        let width = options.width || 100;\r\n        let height = options.height || 100;\r\n        let scaleX = options.scaleX || options.scale || 1;\r\n        let scaleY = options.scaleY || options.scale || 1;\r\n        let sizeX = width * scaleX;\r\n        let sizeY = height * scaleY;\r\n        let translateX = options.translateX || 0;\r\n        let translateY = options.translateY || 0;\r\n\r\n        if (type === 'circular') {\r\n\r\n            // circular gradient size is double compared to linear gradient\r\n            // compensate to make a circle diameter fit insde the width and height\r\n            scaleX = scaleX / 2;\r\n            scaleY = scaleY / 2;\r\n            sizeX = width * scaleX;\r\n            sizeY = height * scaleY;\r\n            translateX = translateX * 2;\r\n            translateY = translateY * 2;\r\n        }\r\n\r\n        if (options.centralize) {\r\n\r\n            if (type === 'linear') {\r\n\r\n                // set center point to center of the gradient\r\n                centerX = 0.5;\r\n                centerY = 0.5;\r\n            }\r\n\r\n            // translate gradient to the center and adjust with scaling (0.5 / scale)\r\n            // then translate normally\r\n            translateX = (0.5 / scaleX + translateX) - centerX;\r\n            translateY = (0.5 / scaleY + translateY) - centerY;\r\n\r\n        } else {\r\n\r\n            translateX = translateX - centerX;\r\n            translateY = translateY - centerY;\r\n        }\r\n\r\n        let gradientFunctionOptions = {\r\n            colors: colors,\r\n            centerX: centerX || 0,\r\n            centerY: centerY || 0,\r\n            translateX: translateX,\r\n            translateY: translateY,\r\n            rotation: options.rotation || 0,\r\n            repeatX: options.repeatX || Repeat.repeat,\r\n            repeatY: options.repeatY || Repeat.repeat,\r\n            mixColors: typeOptions.mixColors\r\n        };\r\n\r\n        return (x, y) => {\r\n\r\n            return fn(x/sizeX, y/sizeY, gradientFunctionOptions);\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Calculate two items from a gradient array and a relative position of\r\n     * the gradient between those two items in an evenly distributed\r\n     * gradient. The resulting values can be used calculate the final color.\r\n     *\r\n     * @example\r\n     * // The example position 0.25 is in the middle of the first and\r\n     * // second colors so new 2 point gradient array contains only those\r\n     * // first and second colors. The given absolute position 0.25 is relatively\r\n     * // 0.5 between those two values.\r\n     * ColorUtil.convertTo2StopGradient([0xFF0000, 0x00FF00, 0x0000FF], 0.25);\r\n     * // output: {array: [0xFF0000, 0x00FF00], position: 0.5}\r\n     *\r\n     * @param {Array} array     Array of colors. Content of the array does not matter.\r\n     * @param {number} position Position on the whole gradient.\r\n     * @return {Object} Relative position between two items and two items from gradient array\r\n     *                           which are the closest to the point indicated by position argument\r\n     *\r\n     * @private\r\n     */\r\n    this.partialGradient = (array, position) => {\r\n\r\n        let lastIndex = array.length - 1;\r\n        let itemIndex = (position * lastIndex) | 0;\r\n        let partSize = 1 / lastIndex * 1000;\r\n        let positionBetweenItems = ((position*1000) % partSize) / partSize;\r\n\r\n        // partSize and position are scaled in the above calculation to fix\r\n        // a javascrip decimal rounding problem. The issue was seen in a gradient\r\n        // in which there were exactly 6 colors. positionBetweenItems for the first\r\n        // color of the 4th gradient stop was rounded to 0.9999... where the correct\r\n        // value was 0 (0.6 % 0.2 = 0.1999.... should be 0)\r\n        // That resulted to a weird vertical line in a gradient\r\n\r\n        let item1 = array[itemIndex];\r\n        let item2 = array[itemIndex+1] !== undefined ? array[itemIndex+1] : item1;\r\n\r\n        return {\r\n            item1: item1,\r\n            item2: item2,\r\n            position: positionBetweenItems\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Calculate two items from a gradient array and a relative position of\r\n     * the gradient between those two items in a gradient whichs has stop colors\r\n     * The resulting values can be used calculate the final color.\r\n     *\r\n     * @example\r\n     * // The example position 0.25 is in the middle of the first and\r\n     * // second colors so new 2 point gradient array contains only those\r\n     * // first and second colors. The given absolute position 0.25 is relatively\r\n     * // 0.5 between those two values.\r\n     * ColorUtil.convertTo2StopGradient([0xFF0000, 0x00FF00, 0x0000FF], 0.25);\r\n     * // output: {array: [0xFF0000, 0x00FF00], position: 0.5}\r\n     *\r\n     * @param {Array} array      Array of colors. Array should have colors stops on x or y axis.\r\n     * @param {number} position  Position on the whole gradient.\r\n     * @return {Object} Relative position between two items and two items from gradient array\r\n     *                           which are the closest to the point indicated by position argument\r\n     *\r\n     * @private\r\n     */\r\n    this.partialGradientWithStops = (array, position, axis) => {\r\n\r\n        let i = 0;\r\n\r\n        while (array[i][axis] < position) {\r\n            i++;\r\n        }\r\n\r\n        let item1 = array[i-1] !== undefined ? array[i-1] : array[i];\r\n        let item2 = array[i];\r\n        let partSize = item2[axis] - item1[axis];\r\n\r\n        return {\r\n            item1: item1,\r\n            item2: item2,\r\n            position: ((position - item1[axis]) / partSize) || 0\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get color from gradient. Calculation is done in\r\n     * rgb object notation so colors should be converted to object notation.\r\n     *\r\n     * @example\r\n     * let gradient = ColorUtil.convert([0xFF0000, 0x00FF00, 0x0000FF], ColorUtil.int.toRgb);\r\n     * ColorUtil.rgb.gradientColor(gradient, 0.5);\r\n     * // output: {r: 0, g: 255, b: 0, a: 255}\r\n     *\r\n     * @param {Array} colors    Array of colors. Colors should be in rgb object notation.\r\n     * @param {number} x        Horizontal position on the gradient. Value in range 0-1.\r\n     * @param {number} y        Vertical position on the gradient. Value in range 0-1.\r\n     * @param {number} centerX       Horizontal position of rotation center. Value in range 0-1.\r\n     * @param {number} centerY       Vertical position of rotation center. Value in range 0-1.\r\n     * @param {function} [repeatX=Repeat.stop]  Repeat function\r\n     * @return {Object} rgb object\r\n     *\r\n     * @private\r\n     */\r\n    this.linearGradient = (x, y, options) => {\r\n        let radian = options.rotation * PI2;\r\n        let cos = Math.cos(radian);\r\n        let sin = Math.sin(radian);\r\n        let dx = (x - options.centerX) - options.translateX;\r\n        let dy = (y - options.centerY) - options.translateY;\r\n\r\n        x = options.repeatX(options.centerX + dx * cos - dy * sin);\r\n\r\n        let parts = this.partialGradientWithStops(options.colors, x, 'x');\r\n\r\n        return options.mixColors(\r\n            parts.item1,\r\n            parts.item2,\r\n            parts.position);\r\n    };\r\n\r\n    /**\r\n     * Get color from matrix. Calculation is done in\r\n     * rgb object notation so colors should be converted to object notation.\r\n     *\r\n     * @example\r\n     * let matrix = ColorUtil.convert([[0xFF0000, 0x00FF00], [0x0000FF]], ColorUtil.int.toRgb);\r\n     * ColorUtil.rgb.matrixColor(matrix, 0.5, 0.5);\r\n     * // output: {r: 63.75, g: 63.75, b: 127.5, a: 255}\r\n     *\r\n     * @param {Array} matrix    Array of gradient color arrays. Colors should be in rgb object notation.\r\n     * @param {number} x        Horizontal position on the gradient. Value in range 0-1.\r\n     * @param {number} y        Vertical position on the gradient. Value in range 0-1.\r\n     * @param {number} centerX       Horizontal position of rotation center. Value in range 0-1.\r\n     * @param {number} centerY       Vertical position of rotation center. Value in range 0-1.\r\n     * @param {function} [repeatX=Repeat.stop]  Repeat function\r\n     * @param {function} [repeatY=Repeat.stop]  Repeat function\r\n     * @return {Object} rgb object\r\n     *\r\n     * @private\r\n     */\r\n    this.linearMatrixGradient = (x, y, options) => {\r\n\r\n        let radian = options.rotation * PI2;\r\n        let cos = Math.cos(radian);\r\n        let sin = Math.sin(radian);\r\n        let dx = (x - options.centerX) - options.translateX;\r\n        let dy = (y - options.centerY) - options.translateY;\r\n\r\n        x = options.repeatX(options.centerX + dx * cos - dy * sin);\r\n        y = options.repeatY(options.centerY + dx * sin + dy * cos);\r\n\r\n        // get gradients and y position between them\r\n        let gradients = this.partialGradientWithStops(options.colors, y, 'y');\r\n        let parts1 = this.partialGradientWithStops(gradients.item1.colors, x, 'x');\r\n        let parts2 = this.partialGradientWithStops(gradients.item2.colors, x, 'x');\r\n\r\n        let color1 = options.mixColors(parts1.item1, parts1.item2, parts1.position);\r\n        let color2 = options.mixColors(parts2.item1, parts2.item2, parts2.position);\r\n\r\n        return options.mixColors(color1, color2, gradients.position);\r\n    };\r\n\r\n    /**\r\n     * Get color from circle gradient. Calculation is done in\r\n     * rgb object notation so colors should be converted to object notation.\r\n     *\r\n     * @example\r\n     * let colors = ColorUtil.rgb.hueColors();\r\n     * ColorUtil.rgb.circleGradientColor(colors, 0.1, 0.1);\r\n     * // output: {r: 0, g: 63.74999999999994, b: 255, a: 255}\r\n     *\r\n     * // keep center the same but rotatio 180 degrees\r\n     * ColorUtil.rgb.circleGradientColor(colors, 0.1, 0.1, 0.5, 0.5, 0.5);\r\n     * // output: {r: 255, g: 191.25, b: 0, a: 255}\r\n     *\r\n     * @param      {Array}   colors      Array of colors. Colors should be in rgb object notation.\r\n     * @param      {number}  x           Horizontal position on the gradient. Value in range 0-1.\r\n     * @param      {number}  y           Vertical position on the gradient. Value in range 0-1.\r\n     * @param      {number}  centerX          Horizontal position of center point. Value in range 0-1.\r\n     * @param      {number}  centerY          Vertical position of center point. Value in range 0-1.\r\n     * @param      {number}  rotation    Rotation of the gradient. Value in range 0-1.\r\n     * @param      {function}  [repeatX=Repeat.repeat]  Repeat function\r\n     * @return     {Object}  rgb object\r\n     *\r\n     * @private\r\n     */\r\n    this.circularGradient = (x, y, options) => {\r\n\r\n        let tx = options.translateX;\r\n        let ty = options.translateY;\r\n\r\n        let angle = options.repeatX(\r\n            (Math.atan2(ty - y, tx - x) + Math.PI) / PI2 - options.rotation);\r\n        let parts = this.partialGradientWithStops(options.colors, angle, 'x');\r\n\r\n        return options.mixColors(parts.item1, parts.item2, parts.position);\r\n    }\r\n\r\n    /**\r\n     * Get color from circle matrix. Calculation is done in\r\n     * rgb object notation so colors should be converted to object notation.\r\n     *\r\n     * @example\r\n     * // center is white, outer edge has hue colors\r\n     * let matrix = [[{r:255, g: 255, b: 255, a: 255}], ColorUtil.rgb.hueColors()];\r\n     * ColorUtil.rgb.circleMatrixColor(matrix, 0.1, 0.1);\r\n     * // output: {r: 110.75021663794428, g: 146.81266247845818, b: 255, a: 255}\r\n     *\r\n     * @param      {Array}   matrix      Matrix of colors. Colors should be in rgb object notation.\r\n     * @param      {number}  x           Horizontal position on the gradient. Value in range 0-1.\r\n     * @param      {number}  y           Vertical position on the gradient. Value in range 0-1.\r\n     * @param      {number}  centerX          Horizontal position of center. Value in range 0-1.\r\n     * @param      {number}  centerY          Vertical position of center. Value in range 0-1.\r\n     * @param      {number}  rotation    Rotation of the gradient. Value in range 0-1.\r\n     * @param      {function}  [repeatX=Repeat.repeat]  Repeat function\r\n     * @param      {function}  [repeatY=Repeat.repeat]  Repeat function\r\n     * @return     {Object}  rgb object\r\n     *\r\n     * @private\r\n     */\r\n    this.circularMatrixGradient = (x, y, options) => {\r\n\r\n        let tx = options.translateX;\r\n        let ty = options.translateY;\r\n        let dx = tx - x;\r\n        let dy = ty - y;\r\n        let distance = options.repeatY(Math.sqrt(dx * dx + dy * dy));\r\n        let angle = options.repeatX((Math.atan2(dy, dx) + Math.PI) / PI2 - options.rotation);\r\n\r\n        // get gradients and y position between them\r\n        let gradients = this.partialGradientWithStops(options.colors, distance, 'y');\r\n        let parts1 = this.partialGradientWithStops(gradients.item1.colors, angle, 'x');\r\n        let parts2 = this.partialGradientWithStops(gradients.item2.colors, angle, 'x');\r\n\r\n        let color1 = options.mixColors(parts1.item1, parts1.item2, parts1.position);\r\n        let color2 = options.mixColors(parts2.item1, parts2.item2, parts2.position);\r\n\r\n        return options.mixColors(color1, color2, gradients.position);\r\n    }\r\n\r\n}();","\r\nimport _ from '../Utils';\r\n\r\nimport GradientDataFlat1D from './GradientDataFlat1D';\r\nimport GradientDataObject2D from './GradientDataObject2D';\r\nimport GradientDataArray2D from './GradientDataArray2D';\r\nimport GradientDataFlat2D from './GradientDataFlat2D';\r\n\r\nconst GRADIENT_DATA_TYPES = [\r\n    GradientDataFlat1D,\r\n    GradientDataObject2D,\r\n    GradientDataArray2D,\r\n    GradientDataFlat2D\r\n];\r\n\r\nexport default class GradientData {\r\n\r\n    static get types() {\r\n\r\n        return GRADIENT_DATA_TYPES;\r\n    }\r\n\r\n    get typeName() {\r\n\r\n        return this.dataType.name;\r\n    }\r\n\r\n    get matrix() {\r\n\r\n        return this.dataType.matrix;\r\n    }\r\n\r\n    get flat1d() {\r\n\r\n        if (!_.has(this.dataType, 'toFlat1d')) {\r\n\r\n            let data = this.dataType.toObject2d(this.data, this.defaultColor);\r\n            let gradientData = new GradientData(data, this.defaultColor);\r\n\r\n            return gradientData.flat1d;\r\n        }\r\n\r\n        return this.dataType.toFlat1d(this.data, this.defaultColor);\r\n    }\r\n\r\n    get flat2d() {\r\n\r\n        if (!_.has(this.dataType, 'toFlat2d')) {\r\n\r\n            let data = this.dataType.toObject2d(this.data, this.defaultColor);\r\n            let gradientData = new GradientData(data, this.defaultColor);\r\n\r\n            return gradientData.flat2d;\r\n        }\r\n\r\n        return this.dataType.toFlat2d(this.data, this.defaultColor);\r\n    }\r\n\r\n    get array2d() {\r\n\r\n        if (!_.has(this.dataType, 'toArray2d')) {\r\n\r\n            let data = this.dataType.toObject2d(this.data, this.defaultColor);\r\n            let gradientData = new GradientData(data, this.defaultColor);\r\n\r\n            return gradientData.array2d;\r\n        }\r\n\r\n        return this.dataType.toArray2d(this.data, this.defaultColor);\r\n    }\r\n\r\n    get object2d() {\r\n\r\n        return this.dataType.toObject2d(this.data, this.defaultColor);\r\n    }\r\n\r\n    constructor(data, defaultColor) {\r\n\r\n        if (!Array.isArray(data) || !data.length) {\r\n\r\n            throw new Error('GradientData: Argument should be and array with at least one item.');\r\n        }\r\n\r\n        this.dataType = this._getDataTypeFromFirstSample(data);\r\n\r\n        if (!this.dataType) {\r\n\r\n            throw new Error('GradientData: One sample was tested and it did not match any supported data structures.');\r\n        }\r\n\r\n        this.data = data;\r\n        this.defaultColor = defaultColor;\r\n    }\r\n\r\n    verify() {\r\n\r\n        return this.dataType.verify(this.data);\r\n    }\r\n\r\n    _getDataTypeFromFirstSample(data) {\r\n\r\n        return _.find(GRADIENT_DATA_TYPES, (dataType) => {\r\n\r\n            return dataType.testStructure(data);\r\n        });\r\n    }\r\n};","\r\nimport _ from '../Utils';\r\n\r\nexport default class {\r\n\r\n    static addDefaultColorsForMatrix(colors, defaultColor) {\r\n\r\n        let keys = _.keys(defaultColor);\r\n\r\n        _.forEach(colors, (item) => {\r\n\r\n            _.forEach(item.colors, (color) => {\r\n\r\n                _.forEach(keys, (key) => {\r\n\r\n                    if (!_.has(color, key)) {\r\n\r\n                        color[key] = defaultColor[key];\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    static addDefaultColors(colors, defaultColor) {\r\n\r\n        let keys = _.keys(defaultColor);\r\n\r\n        _.forEach(colors, (color) => {\r\n\r\n            _.forEach(keys, (key) => {\r\n\r\n                if (!_.has(color, key)) {\r\n\r\n                    color[key] = defaultColor[key];\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static verify(colors, validatorClass) {\r\n\r\n        let isValidStructure = this._verifyExpectedDataStructureInAllSamples(colors, validatorClass);\r\n\r\n        if (!isValidStructure) {\r\n\r\n            throw new Error('Color data structure is not consistent / valid');\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static _verifyExpectedDataStructureInAllSamples(colors, validatorClass) {\r\n\r\n        for (let i = 0; i < colors.length; i++) {\r\n\r\n            let sample = colors[i];\r\n\r\n            if (!validatorClass.testStructureSingleSample(sample)) {\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static addMissingStopsXY(data) {\r\n\r\n        data = this.addMissingStops(data, 'y');\r\n\r\n        _.forEach(data, (item) => {\r\n\r\n            item.colors = this.addMissingStops(item.colors, 'x');\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    static addMissingStops(array, property) {\r\n\r\n        array = _.clone(array);\r\n\r\n        // handle case for colors with 1 point\r\n\r\n        if (array.length === 1) {\r\n\r\n            delete array[0][property];\r\n\r\n            array.push(_.clone(array[0]));\r\n        }\r\n\r\n        // always set first and last indexes to 0 and 1\r\n\r\n        let firstProperty = _.findPropertyIndex(array, property);\r\n        let firstItem = array[0];\r\n        let newItem;\r\n\r\n        if (firstProperty > 0 || firstProperty === -1) {\r\n\r\n            firstItem[property] = 0;\r\n\r\n        } else if (firstItem[property] !== 0) {\r\n\r\n            newItem = _.clone(firstItem);\r\n            newItem[property] = 0;\r\n\r\n            array.unshift(newItem);\r\n        }\r\n\r\n        let lastProperty = _.findLastPropertyIndex(array, property);\r\n        let lastItem = array[array.length-1];\r\n\r\n        if (lastProperty < array.length - 1) {\r\n\r\n            lastItem[property] = 1;\r\n\r\n        } else if (lastItem[property] !== 1) {\r\n\r\n            newItem = _.clone(lastItem);\r\n            newItem[property] = 1;\r\n\r\n            array.push(newItem);\r\n        }\r\n\r\n        // set the rest in between\r\n\r\n        let start = 0, end = 0;\r\n\r\n        while (end > -1) {\r\n\r\n            start = _.findPropertyIndex(array, property, start);\r\n            end = _.findPropertyIndex(array, property, start + 1);\r\n\r\n            if (end > -1) {\r\n\r\n                this._addStopsBetweenIndexes(array, property, start, end);\r\n            }\r\n\r\n            start = end;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    static _addStopsBetweenIndexes(array, property, startIndex, endIndex) {\r\n\r\n        let startStop = array[startIndex][property];\r\n        let endStop = array[endIndex][property];\r\n\r\n        let steps = endIndex - startIndex;\r\n        let stepSize = (endStop - startStop) / steps;\r\n\r\n        for (let i = 1; i < steps; i++) {\r\n\r\n            array[startIndex + i][property] = startStop + i * stepSize;\r\n        }\r\n    }\r\n}","\r\nimport _ from './Utils.js';\r\n\r\nexport default class {\r\n\r\n    static convert(colors, ...conversionFunctions) {\r\n\r\n        if (Array.isArray(colors)) {\r\n\r\n            return colors.map(item => {\r\n\r\n                return this.convert(item, ...conversionFunctions);\r\n            });\r\n        }\r\n\r\n        return conversionFunctions.reduce((acc, fn) => {\r\n\r\n            return fn(acc);\r\n        }, colors);\r\n    }\r\n\r\n    static convertAny(color, targetType, availableTypes) {\r\n\r\n        let type = this.getColorType(color, availableTypes);\r\n\r\n        if (!type || type === targetType) {\r\n\r\n            return color;\r\n        }\r\n\r\n        // direct conversion e.g. int -> hex, hsl -> csshsl\r\n        if (typeof type.to[targetType.name] === 'function') {\r\n\r\n            return type.to[targetType.name](color);\r\n        }\r\n\r\n        // indirect conversion e.g. csshsl -> hex, csshsl -> cssrgb\r\n        let path = this._getConversionPathThroughParentType(type, targetType, availableTypes);\r\n\r\n        return this.convert(color, ...path);\r\n    }\r\n\r\n    static getColorType(color, types) {\r\n\r\n        return _.find(types, (type) => {\r\n\r\n            return type.test(color);\r\n        });\r\n    }\r\n\r\n    static _getConversionPathThroughParentType(type, targetType, availableTypes) {\r\n\r\n        let sourcePath = this._getPathToRoot(type);\r\n        let targetPath = this._getPathToRoot(targetType).reverse();\r\n        let sourceRootType = sourcePath[sourcePath.length-1];\r\n        let targetRootType = targetPath[0];\r\n        let rootTypesAreSame = sourceRootType === targetRootType;\r\n        let rootTypesAreLinked = typeof sourceRootType.to[targetRootType.name] === 'function';\r\n\r\n        if (rootTypesAreSame) {\r\n\r\n            // remove first\r\n            targetPath.shift();\r\n\r\n        } else if (!rootTypesAreLinked) {\r\n\r\n            throw new Error('Path should be implemented from ' +\r\n                sourceRootType.name + ' to ' + targetRootType.name);\r\n        }\r\n\r\n        let combined = sourcePath.concat(targetPath);\r\n        let result = [];\r\n        let currentType, nextType;\r\n\r\n        _.forEach(combined, (currentType, index) => {\r\n\r\n            nextType = combined[index+1];\r\n\r\n            if (nextType) {\r\n\r\n                result.push(currentType.to[nextType.name]);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    static _getPathToRoot(type, path=[]) {\r\n\r\n        path.push(type);\r\n\r\n        if (type.parent) {\r\n\r\n            return this._getPathToRoot(type.parent, path);\r\n        }\r\n\r\n        return path;\r\n    }\r\n}\r\n","\r\nimport Rgb from './Rgb';\r\nimport Int from './Int';\r\nimport Hex from './Hex';\r\nimport Cssrgb from './Cssrgb';\r\nimport Cssrgba from './Cssrgba';\r\nimport Hsl from './Hsl';\r\nimport Csshsl from './Csshsl';\r\nimport Csshsla from './Csshsla';\r\nimport Hsv from './Hsv';\r\n\r\nimport Intabgr from './Intabgr';\r\nimport Intrgba from './Intrgba';\r\n\r\nconst TYPES = [\r\n    Rgb,\r\n    Int,\r\n    Hex,\r\n    Hsl,\r\n    Hsv,\r\n    Cssrgba,\r\n    Cssrgb,\r\n    Csshsla,\r\n    Csshsl\r\n];\r\n\r\nconst TYPES_ALL = TYPES.concat([\r\n    Intabgr,\r\n    Intrgba\r\n]);\r\n\r\nexport { TYPES, TYPES_ALL };","\r\nimport _ from '../Utils.js';\r\n\r\nconst getCanvasGradient = (type, options) => {\r\n\r\n    if (_.isObject(options)) {\r\n\r\n        return type.gradient(options);\r\n\r\n    } else if (typeof options === 'function') {\r\n\r\n        return options;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst getCanvasTarget = (target) => {\r\n\r\n    if (target instanceof HTMLCanvasElement) {\r\n\r\n        return target;\r\n\r\n    } else if (typeof target === 'string') {\r\n\r\n        let element = document.querySelector(target);\r\n\r\n        return getCanvasTarget(element);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport { getCanvasGradient, getCanvasTarget };","\r\nimport Rgb from './Rgb.js';\r\nimport Gradient from '../Gradient';\r\nimport GradientData from '../gradientData/GradientData';\r\nimport { getCanvasGradient, getCanvasTarget } from './shared.js';\r\n\r\nconst DEFAULT_COLOR = {\r\n    h: 0,\r\n    s: 0,\r\n    l: 0,\r\n    a: 1\r\n};\r\n\r\n/**\r\n * Hsl conversion functions\r\n *\r\n * Hsl notation is `{h:H, s:S, l:L, a:A}` where each component (hue, saturation,\r\n * luminosity, alpha) is in range 0-1.\r\n *\r\n * @namespace hsl\r\n * @memberof colorutil\r\n */\r\nlet Hsl = new function() {\r\n\r\n    this.name = 'hsl';\r\n    this.className = 'Hsl';\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.hsl\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    this.test = color => {\r\n        return color !== null &&\r\n            typeof color === 'object' &&\r\n            color.hasOwnProperty('h') &&\r\n            color.hasOwnProperty('s') &&\r\n            color.hasOwnProperty('l') &&\r\n            (color.h >= 0 && color.h <= 1) &&\r\n            (color.s >= 0 && color.s <= 1) &&\r\n            (color.l >= 0 && color.l <= 1) &&\r\n            (color.hasOwnProperty('a') ? (color.a >= 0 && color.a <= 1) : true);\r\n    };\r\n\r\n    /**\r\n     * Creates a gradient.\r\n     *\r\n     * @memberof colorutil.hsl\r\n     *\r\n     * @param      {Object}    options                              Options provided by user\r\n     * @param      {Array|GradientData}     options.colors          Array of colors or instance of GradientData. There are multiple types of data structures. Data structure\r\n     *                                                              defines whether the gradient is one or two-dimensional.\r\n     * @param      {string}    [options.type='linear']              Gradient type: linear | circular\r\n     * @param      {boolean}   [options.verify=false]               Verify that each of the colors in colors property have valid data structure.\r\n     *                                                              If set to true, createGradient will throw an error if data structure is not correct.\r\n     *                                                              Data structure is tested from one sample to identify the data structure. This does not\r\n     *                                                              affect that behavior.\r\n     * @param      {boolean}   [options.validate=true]              Validate and add missing color stops and convert colors data structure to internal data structure\r\n     * @param      {function}  [options.defaultColor={h:0,s:0,l:0,a:1}] Default color used to fill the missing color components in gradient colors.\r\n     *                                                              If options.colors is GradientData, specify the defaultColor for GradientData instead.\r\n     * @param      {number}    [options.width=100]                  Set size of the gradient in pixels.\r\n     * @param      {number}    [options.height=100]                 Set size of the gradient in pixels.\r\n     * @param      {number}    [options.centerX=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the left edge of the gradient and 1 is the right edge.\r\n     *                                                              centerX can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.centerY=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the top edge of the gradient and 1 is the bottom edge.\r\n     *                                                              centerY can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.scale=1]                    Scale of the gradient. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleX=1]                   Scale of the gradient on x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleY=1]                   Scale of the gradient on y axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateX=0]               Translate gradient along x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateY=0]               Translate gradient along y axis. Value in range 0 to 1.\r\n     * @param      {boolean}   [options.centralize=false]           Overrides translate values and automatically adjusts the positioning to the center.\r\n     * @param      {number}    [options.rotation=0]                 Rotation of the gradient. Value in range 0 to 1.\r\n     * @param      {function}  [options.repeatX=colorutil.repeat.repeat] X repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     * @param      {function}  [options.repeatY=colorutil.repeat.repeat] Y repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     *\r\n     * @return     {function}  Function that calculates a color for a single point on gradient. Accepts x and y parameters.\r\n     *                         Though the x and y may exceed the limit, but gradient repeat will take effect.\r\n     */\r\n    this.gradient = options => {\r\n\r\n        return Gradient.createGradient(options, {\r\n\r\n            mixColors: mixColors,\r\n            defaultColor: DEFAULT_COLOR\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a gradient data object which allows conversion\r\n     * between the supported data structures\r\n     *\r\n     * @memberof colorutil.hsl\r\n     *\r\n     * @param      {Array}          data            Array of colors. There are multiple types of data structures.\r\n     * @param      {Object}         [defaultColor={h:0,s:0,l:0,a:1}]  The default color\r\n     * @return     {GradientData}\r\n     */\r\n    this.gradientData = (data, defaultColor) => {\r\n\r\n        defaultColor = defaultColor || DEFAULT_COLOR;\r\n\r\n        return new GradientData(data, defaultColor);\r\n    };\r\n\r\n    /**\r\n     * Draw a gradient on canvas\r\n     *\r\n     * @param      {HTMLCanvasElement|string}   target   The canvas on which gradient is drawn. Target may be canvas or css selector to canvas (evaluated with querySelector)\r\n     * @param      {Object|Function}            options  Options of gradient or gradient function\r\n     */\r\n    this.draw = (target, options) => {\r\n\r\n        let gradient = getCanvasGradient(this, options);\r\n        let canvas = getCanvasTarget(target);\r\n\r\n        if (canvas && gradient) {\r\n\r\n            let width = canvas.width;\r\n            let height = canvas.height;\r\n            let ctx = canvas.getContext('2d');\r\n            let imageData  = ctx.createImageData(width, height);\r\n            let buffer = imageData.data.buffer;\r\n            let uint32View = new Uint32Array(buffer);\r\n            let uint8CView = new Uint8ClampedArray(buffer);\r\n\r\n            for(let x = 0; x < width; x++) {\r\n\r\n                for(let y = 0; y < height; y++) {\r\n\r\n                    let hsl = gradient(x, y);\r\n                    let rgb = this.to.rgb(hsl);\r\n\r\n                    uint32View[y * width + x] = Rgb.to.intabgr(rgb);\r\n                }\r\n            }\r\n\r\n            imageData.data.set(uint8CView);\r\n\r\n            ctx.putImageData(imageData, 0, 0);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.hsl\r\n     */\r\n    this.to = {\r\n\r\n        /**\r\n         * Hsl object `{h:H, s:S, l:L, a:A}` to rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @example\r\n         * colorutil.hsl.to.rgb({h: 1/6, s: 0.5, l: 0.5});\r\n         * // output: {r: 191, g: 191, b: 64, a: 255}\r\n         *\r\n         * colorutil.hsl.to.rgb({h: 1/6, s: 0.5, l: 0.5, a: 0.5});\r\n         * // output: {r: 191, g: 191, b: 64, a: 128}\r\n         *\r\n         * @memberof colorutil.hsl.to\r\n         *\r\n         * @param      {Object}  hsl        Hsl object\r\n         * @return     {Object}\r\n         */\r\n        rgb: hsl => {\r\n            let {h:h, s:s, l:l, a:a} = hsl;\r\n            let c = (1 - Math.abs(2 * l - 1)) * s\r\n            let x = c * (1 - Math.abs(h * 6 % 2 - 1));\r\n            let m = l - c / 2;\r\n            let r, g, b;\r\n\r\n            if (h < 1/6) {\r\n                [r, g, b] = [c, x, 0];\r\n\r\n            } else if (h < 2/6) {\r\n                [r, g, b] = [x, c, 0];\r\n\r\n            } else if (h < 3/6) {\r\n                [r, g, b] = [0, c, x];\r\n\r\n            } else if (h < 4/6) {\r\n                [r, g, b] = [0, x, c];\r\n\r\n            } else if (h < 5/6) {\r\n                [r, g, b] = [x, 0, c];\r\n\r\n            } else {\r\n                [r, g, b] = [c, 0, x];\r\n            }\r\n\r\n            return {\r\n                r: (r + m) * 0xFF,\r\n                g: (g + m) * 0xFF,\r\n                b: (b + m) * 0xFF,\r\n                a: a === undefined ? 0xFF : a * 0xFF\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Hsl object `{h:H, s:S, l:L, a:A}` to hsv object `{h:H, s:S, v:V, a:A}`\r\n         *\r\n         * @example\r\n         * colorutil.hsl.to.hsv({h: 1/6, s: 0.5, l: 0.5});\r\n         * // output: {h: 0.16666666666666666, s: 0.6666666666666666, v: 0.75, a: 1}\r\n         *\r\n         * @memberof colorutil.hsl.to\r\n         *\r\n         * @param      {Object}  hsl        Hsl object\r\n         * @return     {Object}\r\n         */\r\n        hsv: hsl => {\r\n            let {h:h, s:s, l:l, a:a} = hsl;\r\n\r\n            let v = (2 * l + s * (1 - Math.abs(2 * l - 1))) / 2;\r\n            s = (2 * (v - l)) / v;\r\n\r\n            return {\r\n                h: h,\r\n                s: s,\r\n                v: v,\r\n                a: a === undefined ? 1 : a\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Convert hsl object `{h:H, s:S, l:L}` to hsl functional notation string `'hsl(HHH,SSS%,LLL%)'`.\r\n         *\r\n         * @example\r\n         * colorutil.hsl.to.cssHsl({h:2/6, s:0.5, l:0.5});\r\n         * // output: \"hsl(120,50%,50%)\"\r\n         *\r\n         * @memberof colorutil.hsl.to\r\n         *\r\n         * @param      {Object}    hsl\r\n         * @return     {string}\r\n         */\r\n        csshsl: hsl => {\r\n            return `hsl(${Math.round(hsl.h*360)},${Math.round(hsl.s*100)}%,${Math.round(hsl.l*100)}%)`;\r\n        },\r\n\r\n        /**\r\n         * Convert hsl object `{h:H, s:S, l:L, a:A}` to hsl functional notation string `'hsla(HHH,SSS%,LLL%,A)'`.\r\n         *\r\n         * @example\r\n         * colorutil.hsl.to.csshsla({h:2/6, s:0.5, l:0.5, a:0.5});\r\n         * // output: \"hsla(120,50%,50%,0.5)\"\r\n         *\r\n         * @memberof colorutil.hsl.to\r\n         *\r\n         * @param      {Object}    hsl\r\n         * @return     {string}\r\n         */\r\n        csshsla: hsl => {\r\n            return `hsla(${Math.round(hsl.h*360)},${Math.round(hsl.s*100)}%,${Math.round(hsl.l*100)}%,${hsl.a})`;\r\n        }\r\n    };\r\n};\r\n\r\nfunction mixColors(color1, color2, position) {\r\n\r\n    return {\r\n        h: color1.h - position * (color1.h - color2.h),\r\n        s: color1.s - position * (color1.s - color2.s),\r\n        l: color1.l - position * (color1.l - color2.l),\r\n        a: color1.a - position * (color1.a - color2.a)\r\n    }\r\n}\r\n\r\nexport default Hsl;","\r\n/**\r\n * @class repeat\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    none: (position) => {\r\n        return position;\r\n    },\r\n\r\n    /**\r\n     * Stop gradient at the edge color\r\n     *\r\n     * @memberof colorutil.repeat\r\n     */\r\n    stop: (position) => {\r\n        return position < 0 ? 0 : position > 1 ? 1 : position;\r\n    },\r\n\r\n    /**\r\n     * Repeat gradient with the same pattern\r\n     *\r\n     * @memberof colorutil.repeat\r\n     */\r\n    repeat: (position) => {\r\n        return position < 0 ? 1 + position % 1 : position > 1 ? position % 1 : position;\r\n    }\r\n};","\r\n\r\nimport ConversionUtil from './ConversionUtil';\r\nimport Gradient from './Gradient';\r\nimport Repeat from './Repeat';\r\nimport Color from './Color';\r\nimport _ from './Utils';\r\n\r\nimport Any from './types/Any';\r\nimport {TYPES_ALL, TYPES} from './types/types';\r\n\r\nconst LITTLE_ENDIAN = 0;\r\nconst BIG_ENDIAN = 1;\r\nconst UNKNOWN_ENDIAN = 2;\r\n\r\nlet SYSTEM_ENDIAN = (() => {\r\n    let arrayBuffer = new ArrayBuffer(2);\r\n    let uint8Array = new Uint8Array(arrayBuffer);\r\n    let uint16Array = new Uint16Array(arrayBuffer);\r\n\r\n    uint8Array[0] = 0xAA;\r\n    uint8Array[1] = 0xBB;\r\n\r\n    if (uint16Array[0] === 0xBBAA) {\r\n        return LITTLE_ENDIAN;\r\n\r\n    } else if (uint16Array[0] === 0xAABB) {\r\n        return BIG_ENDIAN;\r\n\r\n    } else {\r\n        return UNKNOW_ENDIAN;\r\n    }\r\n})();\r\n\r\n// alpha handling\r\n// - parent type -> sub type: alpha is lost depending on sub type. no checking if alpha is present or not. incorrect/missing alpha might lead to NaN or fully transparent values.\r\n// - parent type -> parent type: alpha is preserved or added if missing.\r\n// - sub type -> parent type: offer alpha argument. alpha is always added to parent type. default fully opaque. arg alpha range is the target format alpha range\r\n// - sub type -> sub type: offer alpha argument depending whether target sub type supports alpha. default fully opaque. arg alpha range is the target format alpha range\r\n\r\n/**\r\n * @class colorutil\r\n * @classdesc Color conversion functions and gradient functions.\r\n */\r\nlet colorutil = {\r\n\r\n    any: Any,\r\n\r\n    /**\r\n     * Get the endian used by the system.\r\n     *\r\n     * {@link https://developer.mozilla.org/en-US/docs/Glossary/Endianness}\r\n     *\r\n     * @memberof colorutil\r\n     *\r\n     * @return     {number}  0=little-endian, 1=big-endian, 2=unknown-endian\r\n     */\r\n    endian: SYSTEM_ENDIAN,\r\n\r\n    /**\r\n     * Run conversion functions for single color, array of colors or\r\n     * matrix of colors.\r\n     *\r\n     * @example\r\n     * colorutil.convert(0xFF0000, colorutil.int.to.hex);\r\n     * // output: \"#ff0000\"\r\n     *\r\n     * colorutil.convert([0xFF0000, 0x00FF00], colorutil.int.to.hex);\r\n     * // output: [\"#ff0000\", \"#00ff00\"]\r\n     *\r\n     * colorutil.convert([[0xFF0000, 0x00FF00], 0x0000FF], colorutil.int.to.hex);\r\n     * // output: [['#ff0000', '#00ff00'], '#0000ff']\r\n     *\r\n     * colorutil.convert([[0xFF0000, 0x00FF00], 0x0000FF], colorutil.int.to.hex, colorutil.hex.to.cssrgb);\r\n     * // output: [['rgb(255,0,0)', 'rgb(0,255,0)'], 'rgb(0,0,255)']\r\n     *\r\n     * @memberof colorutil\r\n     *\r\n     * @param      {*}             colors               Array of colors or single color\r\n     * @param      {...function}   conversionFunctions  Rest of the parameters are conversion functions\r\n     *                                                  which are executed in the order they are listed.\r\n     * @return     {Array}\r\n     */\r\n    convert: ConversionUtil.convert,\r\n\r\n    colorType: (color) => {\r\n\r\n        return ConversionUtil.getColorType(color, TYPES);\r\n    },\r\n\r\n    repeat: Repeat,\r\n\r\n    color: (color) => {\r\n\r\n        return new Color(color);\r\n    }\r\n}\r\n\r\n_.forEach(TYPES_ALL, (type) => {\r\n\r\n    colorutil[type.name] = type;\r\n});\r\n\r\n\r\n\r\n\r\nexport default colorutil;","\r\nimport _ from '../Utils';\r\nimport GradientDataUtil from './GradientDataUtil';\r\n\r\n/*\r\none dimensional data structure for normal gradients\r\n[\r\n    {x:0},\r\n    {x:1}\r\n]\r\n*/\r\nexport default class {\r\n\r\n    static get name () {\r\n\r\n        return 'flat1d';\r\n    }\r\n\r\n    static get matrix() {\r\n\r\n        return false;\r\n    }\r\n\r\n    static testStructure(colors) {\r\n\r\n        let sample = _.get(colors, '0');\r\n\r\n        return this.testStructureSingleSample(sample) &&\r\n            this._testStructureAllSamples(colors);\r\n    }\r\n\r\n    static verify(colors) {\r\n\r\n        return GradientDataUtil.verify(colors, this);\r\n    }\r\n\r\n    static testStructureSingleSample(item) {\r\n\r\n        return _.isObject(item) && !_.has(item, 'colors');\r\n    }\r\n\r\n    static _testStructureAllSamples(colors) {\r\n\r\n        return _.findPropertyIndex(colors, 'y') === -1;\r\n    }\r\n\r\n    static toFlat1d(colors, defaultColor) {\r\n\r\n        let data = GradientDataUtil.addMissingStops(colors, 'x');\r\n\r\n        GradientDataUtil.addDefaultColors(data, defaultColor);\r\n\r\n        return data;\r\n    }\r\n\r\n    static toObject2d(colors, defaultColor) {\r\n\r\n        let data = this.toFlat1d(colors, defaultColor);\r\n\r\n        return [\r\n            {\r\n                y: 0,\r\n                colors: data\r\n            },\r\n            {\r\n                y: 1,\r\n                colors: data\r\n            }\r\n        ];\r\n    }\r\n}","\r\nimport _ from '../Utils';\r\nimport GradientDataUtil from './GradientDataUtil';\r\n/*\r\n\r\ntwo dimensional data structure for matrix gradients\r\n\r\n[\r\n    {\r\n        y: 0,\r\n        colors: [\r\n            {x:0},\r\n            {x:1}\r\n        ]\r\n    },\r\n    {\r\n        y: 0,\r\n        colors: [\r\n            {x:0},\r\n            {x:1}\r\n        ]\r\n    }\r\n];\r\n*/\r\nexport default class {\r\n\r\n    static get name () {\r\n\r\n        return 'object2d';\r\n    }\r\n\r\n    static get matrix() {\r\n\r\n        return true;\r\n    }\r\n\r\n    static testStructure(colors) {\r\n\r\n        let sample = _.get(colors, '0');\r\n\r\n        return this.testStructureSingleSample(sample);\r\n    }\r\n\r\n    static verify(colors) {\r\n\r\n        return GradientDataUtil.verify(colors, this);\r\n    }\r\n\r\n    static testStructureSingleSample(sample) {\r\n\r\n        let subSamples = _.get(sample, 'colors');\r\n        let isValid = _.isObject(sample) && Array.isArray(subSamples);\r\n\r\n        if (!isValid) {\r\n\r\n            return false;\r\n        }\r\n\r\n        if (subSamples.length < 1) {\r\n\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < subSamples.length; i++) {\r\n\r\n            let subSample = subSamples[i];\r\n\r\n            isValid = _.isObject(subSample);\r\n\r\n            if (!isValid) {\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static toObject2d(colors, defaultColor) {\r\n\r\n        let data = GradientDataUtil.addMissingStopsXY(colors);\r\n\r\n        GradientDataUtil.addDefaultColorsForMatrix(data, defaultColor);\r\n\r\n        return data;\r\n    }\r\n\r\n    static toFlat1d(colors, defaultColor) {\r\n\r\n        let data = this.toObject2d(colors, defaultColor);\r\n        let result = [];\r\n\r\n        _.forEach(data, (row) => {\r\n\r\n            _.forEach(row.colors, (color) => {\r\n\r\n                delete color.x;\r\n\r\n                result.push(color);\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    static toArray2d(colors, defaultColor) {\r\n\r\n        let data = this.toObject2d(colors, defaultColor);\r\n\r\n        return _.map(data, 'colors');\r\n    }\r\n\r\n    static toFlat2d(colors, defaultColor) {\r\n\r\n        let data = this.toObject2d(colors, defaultColor);\r\n        let result = [];\r\n\r\n        _.forEach(data, (row) => {\r\n\r\n            let y = row.y;\r\n\r\n            _.forEach(row.colors, (color) => {\r\n\r\n                color.y = y;\r\n\r\n                result.push(color);\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n}","\r\nimport _ from '../Utils';\r\nimport GradientDataUtil from './GradientDataUtil';\r\n\r\n/*\r\nTwo dimensional self scaling matrix data structure\r\n[\r\n    [\r\n        {},\r\n        {}\r\n    ],\r\n    [\r\n        {},\r\n        {x: ...}\r\n    ].y = ...\r\n];\r\n*/\r\nexport default class {\r\n\r\n    static get name () {\r\n\r\n        return 'array2d';\r\n    }\r\n\r\n    static get matrix() {\r\n\r\n        return true;\r\n    }\r\n\r\n    static testStructure(colors) {\r\n\r\n        let sample = _.get(colors, '0');\r\n\r\n        return this.testStructureSingleSample(sample);\r\n    }\r\n\r\n    static verify(colors) {\r\n\r\n        return GradientDataUtil.verify(colors, this);\r\n    }\r\n\r\n    static testStructureSingleSample(sample) {\r\n\r\n        let subSamples = sample;\r\n        let isValid = Array.isArray(sample) && subSamples.length > 0;\r\n\r\n        if (!isValid) {\r\n\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < subSamples.length; i++) {\r\n\r\n            let subSample = subSamples[i];\r\n\r\n            isValid = _.isObject(subSample);\r\n\r\n            if (!isValid) {\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static toObject2d(colors, defaultColor) {\r\n\r\n        let data = colors.map((item) => {\r\n\r\n            let newItem = {}\r\n\r\n            if (_.isNumber(item.y)) {\r\n\r\n                newItem.y = item.y;\r\n            }\r\n\r\n            newItem.colors = item;\r\n\r\n            return newItem;\r\n        });\r\n\r\n        data = GradientDataUtil.addMissingStopsXY(data);\r\n\r\n        GradientDataUtil.addDefaultColorsForMatrix(data, defaultColor);\r\n\r\n        return data;\r\n    }\r\n}","\r\nimport _ from '../Utils';\r\nimport GradientDataUtil from './GradientDataUtil';\r\n\r\n/*\r\nTwo dimensional flat matrix data structure\r\n\r\nMust have at least one y-value specified.\r\n\r\n[\r\n    {x:0, y: 0},\r\n    {x:1, y: 0},\r\n    {x:0, y: 1},\r\n    {x:1, y: 1}\r\n];\r\n*/\r\nexport default class {\r\n\r\n    static get name () {\r\n\r\n        return 'flat2d';\r\n    }\r\n\r\n    static get matrix() {\r\n\r\n        return true;\r\n    }\r\n\r\n    static testStructure(colors) {\r\n\r\n        let sample = _.get(colors, '0');\r\n\r\n        return this.testStructureSingleSample(sample) &&\r\n            this._testStructureAllSamples(colors);\r\n    }\r\n\r\n    static verify(colors) {\r\n\r\n        return GradientDataUtil.verify(colors, this);\r\n    }\r\n\r\n    static testStructureSingleSample(item) {\r\n\r\n        return _.isObject(item) && !_.has(item, 'colors');\r\n    }\r\n\r\n    static _testStructureAllSamples(colors) {\r\n\r\n        return _.findPropertyIndex(colors, 'y') > -1;\r\n    }\r\n\r\n    static toObject2d(colors, defaultColor) {\r\n\r\n        colors = _.clone(colors);\r\n\r\n        let data = [];\r\n        let prevY = 0;\r\n        let y;\r\n\r\n        _.forEach(colors, (item) => {\r\n\r\n            y = _.isNumber(item.y) ? item.y : prevY;\r\n\r\n            let existing = _.find(data, ['y', y]);\r\n\r\n            if (existing) {\r\n\r\n                existing.colors.push(item);\r\n\r\n            } else {\r\n\r\n                data.push({\r\n                    y: y,\r\n                    colors: [item]\r\n                });\r\n            }\r\n\r\n            prevY = y;\r\n\r\n            delete item.y;\r\n        });\r\n\r\n        data = GradientDataUtil.addMissingStopsXY(data);\r\n\r\n        GradientDataUtil.addDefaultColorsForMatrix(data, defaultColor);\r\n\r\n        return data;\r\n    }\r\n}","\r\nimport {TYPES} from './types/types';\r\nimport Rgb from './types/Rgb';\r\nimport Gradient from './Gradient';\r\nimport ConversionUtil from './ConversionUtil';\r\nimport _ from './Utils';\r\n\r\n/**\r\n * Immutable class which holds and caches all the color values\r\n *\r\n * @class color\r\n * @memberof colorutil\r\n */\r\nclass Color {\r\n\r\n    constructor(color) {\r\n\r\n        if (color instanceof Color) {\r\n\r\n            this._primaryColor = _.clone(color._primaryColor);\r\n            this._cache = this._cloneCache(color);\r\n\r\n        } else {\r\n\r\n            let type = ConversionUtil.getColorType(color, TYPES);\r\n\r\n            if (!type) {\r\n\r\n                type = 'Rgb';\r\n                color = {r: 0, g: 0, b: 0, a: 255};\r\n            }\r\n\r\n            this._primaryColor = color;\r\n            this._cache = {};\r\n            this._cache[type.name] = color;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create clone of this color.\r\n     *\r\n     * @memberof colorutil.color\r\n     *\r\n     * @return     {Color}\r\n     */\r\n    clone() {\r\n\r\n        return new Color(this);\r\n    }\r\n\r\n    /**\r\n     * Create clone of this color where hue is shifted\r\n     * to same as with the color in argument.\r\n     *\r\n     * @memberof colorutil.color\r\n     *\r\n     * @param      {*}  color   Any color value\r\n     * @return     {Color}\r\n     */\r\n    hueFromColor(color) {\r\n\r\n        let hsv = this.hsv;\r\n\r\n        hsv.h = new Color(color).hsv.h;\r\n\r\n        return new Color(hsv);\r\n    }\r\n\r\n    /**\r\n     * Create clone of this color where hue value is shifted\r\n     * to a value.\r\n     *\r\n     * @private\r\n     * @memberof colorutil.color\r\n     *\r\n     * @param      {*}  color   Hue value in range 0 - 1\r\n     * @return     {Color}\r\n     */\r\n    hueFromValue(hueValue) {\r\n\r\n        let hsv = this.hsv;\r\n\r\n        hsv.h = hueValue > 1 ? 1 : hueValue < 0 ? 0 : hueValue;\r\n\r\n        return new Color(hsv);\r\n    }\r\n\r\n    /**\r\n     * Create new color which is the hue color of this color.\r\n     * Cached\r\n     *\r\n     * @memberof colorutil.color\r\n     *\r\n     * @return     {Color}\r\n     */\r\n    hue() {\r\n\r\n        this._cacheValue('hue', () => {\r\n\r\n            let parts = Gradient.partialGradient(Rgb.hueColors(), this.hsv.h);\r\n            let blend = Rgb.mix(parts.item1, parts.item2, parts.position);\r\n\r\n            return new Color(blend);\r\n        });\r\n\r\n        return this._cache.hue;\r\n    }\r\n}\r\n\r\nColor.prototype._cacheValue = function(id, getCachedValue) {\r\n\r\n    if (!_.has(this._cache, id)) {\r\n\r\n        let value = getCachedValue();\r\n\r\n        this._cache[id] = value;\r\n    }\r\n};\r\n\r\nColor.prototype._cloneCache = function(color) {\r\n\r\n    let hue = color._cache.hue;\r\n    let cache = _.clone(color._cache);\r\n\r\n    if (hue) {\r\n\r\n        cache.hue = hue.clone();\r\n    }\r\n\r\n    return cache;\r\n};\r\n\r\n_.forEach(TYPES, (type) => {\r\n\r\n    let typeName = type.name;\r\n\r\n    Object.defineProperty(Color.prototype, typeName, {\r\n\r\n        get: function() {\r\n\r\n            this._cacheValue(typeName, () => {\r\n\r\n                return ConversionUtil.convertAny(this._primaryColor, type, TYPES);\r\n            });\r\n\r\n            return this._cache[typeName];\r\n        }\r\n    });\r\n});\r\n\r\n/*\r\n * @name int\r\n * @memberof colorutil.color\r\n * @type {number}\r\n */\r\n\r\n/*\r\n * @name hex\r\n * @memberof colorutil.color\r\n * @type {string}\r\n */\r\n\r\nexport default Color;","\r\nimport Rgb from './Rgb';\r\n\r\n/**\r\n * Number conversion functions.\r\n *\r\n * Int notation is 24-bit number representing the RGB values `0xRRGGBB`.\r\n *\r\n * @namespace int\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'int',\r\n    className: 'Int',\r\n    parent: Rgb,\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.int\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    test: color => {\r\n        return typeof color === 'number' &&\r\n            color <= 0xFFFFFF &&\r\n            color >= 0;\r\n    },\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.int\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * 24-bit number `0xRRGGBB` to rgb `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @memberof colorutil.int.to\r\n         *\r\n         * @example\r\n         * colorutil.int.to.rgb(0xFF0000);\r\n         * // output: {r: 255, g: 0, b: 0, a: 255}\r\n         *\r\n         * colorutil.int.to.rgb(0xFF0000, 128);\r\n         * // output: {r: 255, g: 0, b: 0, a: 128}\r\n         *\r\n         * @param      {number}  int        Integer\r\n         * @param      {number}  [a=0xFF]   Alpha value in range 0-255\r\n         * @return     {Object}\r\n         */\r\n        rgb: (int, a=0xFF) => {\r\n            return {\r\n                r: (int & 0xFF0000) >> 16,\r\n                g: (int & 0x00FF00) >> 8,\r\n                b: int & 0x0000FF,\r\n                a: a\r\n            };\r\n        },\r\n\r\n        /**\r\n         * 24-bit number `0xRRGGBB` to 24-bit hex string `'#RRGGBB'`.\r\n         *\r\n         * @memberof colorutil.int.to\r\n         *\r\n         * @example\r\n         * colorutil.int.to.hex(0x00FF00);\r\n         * // output: \"#00ff00\"\r\n         *\r\n         * @param      {number}  int        Integer\r\n         * @return     {string}\r\n         */\r\n        hex: int => {\r\n            return '#' + ((1 << 24) + int).toString(16).slice(1);\r\n        },\r\n\r\n        /**\r\n         * 24-bit number `0xRRGGBB` to rgb functional notation string `'rgb(RRR,GGG,BBB)'`\r\n         *\r\n         * @memberof colorutil.int.to\r\n         *\r\n         * @example\r\n         * colorutil.int.to.cssrgb(0x00FF00);\r\n         * // output: \"rgb(0,255,0)\"\r\n         *\r\n         * @param      {number}  int        Integer\r\n         * @return     {string}\r\n         */\r\n        cssrgb: int => {\r\n            return 'rgb('\r\n                    + ((int & 0xFF0000) >> 16) + ','\r\n                    + ((int & 0x00FF00) >> 8) + ','\r\n                    + (int & 0x0000FF) + ')';\r\n        },\r\n\r\n        /**\r\n         * 24-bit number `0xRRGGBB` to rgb functional notation string `'rgba(RRR,GGG,BBB,A)'`\r\n         *\r\n         * @memberof colorutil.int.to\r\n         *\r\n         * @example\r\n         * colorutil.int.to.cssrgba(0x00FF00);\r\n         * // output: \"rgba(0,255,0,1)\"\r\n         *\r\n         * colorutil.int.to.cssrgba(0x00FF00, 0.5);\r\n         * // output: \"rgba(0,255,0,0.5)\"\r\n         *\r\n         * @param      {number}  int        Integer\r\n         * @param      {number}  [a=1]      Alpha value in range 0-1\r\n         * @return     {string}\r\n         */\r\n        cssrgba: (int, a=1) => {\r\n            return 'rgba('\r\n                    + ((int & 0xFF0000) >> 16) + ','\r\n                    + ((int & 0x00FF00) >> 8) + ','\r\n                    + (int & 0x0000FF) + ','\r\n                    + a +')';\r\n        }\r\n    }\r\n}","\r\nimport Rgb from './Rgb';\r\n\r\nconst REG_HEX_SHORT = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\nconst REG_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\r\n\r\n/**\r\n * Hexadecimal conversion functions\r\n *\r\n * Hex notation is 24-bit hex string representing the RGB values `'#RRGGBB'`.\r\n *\r\n * @namespace hex\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'hex',\r\n    className: 'Hex',\r\n    parent: Rgb,\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.hex\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    test: color => {\r\n        return typeof color === 'string' &&\r\n            !!(REG_HEX.exec(color) || REG_HEX_SHORT.exec(color));\r\n    },\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.hex\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * 24-bit hex string `'#RRGGBB'` to rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @memberof colorutil.hex.to\r\n         *\r\n         * @example\r\n         * colorutil.hex.to.rgb('#00FF00');\r\n         * // output: {r: 0, g: 255, b: 0, a: 255}\r\n         * colorutil.hex.to.rgb('#00FF00', 127);\r\n         * // output: {r: 0, g: 255, b: 0, a: 127}\r\n         *\r\n         * @param      {string}  hex        Hexadecimal string\r\n         * @param      {number}  [a=0xFF]   Alpha value in range 0-255\r\n         * @return     {Object}\r\n         */\r\n        rgb: (hex, a=0xFF) => {\r\n            hex = hex.replace(REG_HEX_SHORT, (m, r, g, b) => r + r + g + g + b + b);\r\n\r\n            let [m,r,g,b] = REG_HEX.exec(hex) || [];\r\n\r\n            return m ? {\r\n                r: parseInt(r, 16),\r\n                g: parseInt(g, 16),\r\n                b: parseInt(b, 16),\r\n                a: a\r\n            } : null;\r\n        },\r\n\r\n        /**\r\n         * 24-bit hex string `'#RRGGBB'` to 24-bit integer `0xRRGGBB`\r\n         *\r\n         * @memberof colorutil.hex.to\r\n         *\r\n         * @example\r\n         * colorutil.hex.to.int('#00FF00');\r\n         * // output: 65280\r\n         *\r\n         * @param      {string}  hex        Hexadecimal string\r\n         * @return     {number}\r\n         */\r\n        int: hex => {\r\n            return parseInt(\r\n                hex.replace(REG_HEX_SHORT, (m, r, g, b) => r + r + g + g + b + b)\r\n                .replace('#', ''), 16);\r\n        },\r\n\r\n        /**\r\n         * 24-bit hex string `'#RRGGBB'` to rgb functional notation string `'rgb(RRR,GGG,BBB)'`\r\n         *\r\n         * @memberof colorutil.hex.to\r\n         *\r\n         * @example\r\n         * colorutil.hex.to.cssrgb('#00FF00')\r\n         * // output: \"rgb(0,255,0)\"\r\n         *\r\n         * @param      {string}  hex     Hexadecimal string\r\n         * @return     {string}\r\n         */\r\n        cssrgb: hex => {\r\n            hex = hex.replace(REG_HEX_SHORT, (m, r, g, b) => r + r + g + g + b + b);\r\n\r\n            let [m,r,g,b] = REG_HEX.exec(hex) || [];\r\n\r\n            return m ? 'rgb('\r\n                + parseInt(r, 16) + ','\r\n                + parseInt(g, 16) + ','\r\n                + parseInt(b, 16) + ')'\r\n            : null;\r\n        },\r\n\r\n        /**\r\n         * 24-bit hex string `'#RRGGBB'` to rgb functional notation string `'rgba(RRR,GGG,BBB,A)'`\r\n         *\r\n         * @memberof colorutil.hex.to\r\n         *\r\n         * @example\r\n         * colorutil.hex.to.cssrgba('#00FF00')\r\n         * // output: \"rgba(0,255,0,1)\"\r\n         *\r\n         * colorutil.hex.to.cssrgba('#00FF00', 0.5)\r\n         * // output: \"rgba(0,255,0,0.5)\"\r\n         *\r\n         * @param      {string}  hex     Hexadecimal string\r\n         * @param      {number}  [a=1]   Alpha value in range 0-1\r\n         * @return     {string}\r\n         */\r\n        cssrgba: (hex, a=1) => {\r\n            hex = hex.replace(REG_HEX_SHORT, (m, r, g, b) => r + r + g + g + b + b);\r\n\r\n            let [m,r,g,b] = REG_HEX.exec(hex) || [];\r\n\r\n            return m ? 'rgba('\r\n                + parseInt(r, 16) + ','\r\n                + parseInt(g, 16) + ','\r\n                + parseInt(b, 16) + ','\r\n                + a + ')'\r\n            : null;\r\n        }\r\n    }\r\n}","\r\nimport Rgb from './Rgb';\r\n\r\nconst REG_RGB = /^rgba?\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/;\r\n\r\n/**\r\n * cssrgb conversion functions\r\n *\r\n * cssrgb notation is `'rgb(RRR,GGG,BBB)'`\r\n *\r\n * @namespace cssrgb\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'cssrgb',\r\n    className: 'Cssrgb',\r\n    parent: Rgb,\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.cssrgb\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    test: color => {\r\n        return typeof color === 'string' && !!REG_RGB.exec(color);\r\n    },\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.cssrgb\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * Rgb functional notation string `'rgb(RRR,GGG,BBB)'` to rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @memberof colorutil.cssrgb.to\r\n         *\r\n         * @example\r\n         * colorutil.cssrgb.to.rgb('rgb(0,255,0)')\r\n         * // output: {r: 0, g: 255, b: 0, a: 255}\r\n\r\n         * @param      {string} cssrgb   Rgb string\r\n         * @param      {number} [a=0xFF]    Alpha value in range 0-255\r\n         * @return     {Object}\r\n         */\r\n        rgb: (cssrgb, a=0xFF) => {\r\n            let [m,r,g,b] = REG_RGB.exec(cssrgb) || [];\r\n\r\n            return m ? {\r\n                    r: parseInt(r),\r\n                    g: parseInt(g),\r\n                    b: parseInt(b),\r\n                    a: a\r\n                }\r\n            : null;\r\n        },\r\n\r\n        /**\r\n         * Rgb functional notation string `'rgb(RRR,GGG,BBB)'` to 24-bit integer `0xRRGGBB`. Alpha is ignored.\r\n         *\r\n         * @memberof colorutil.cssrgb.to\r\n         *\r\n         * @example\r\n         * colorutil.cssrgb.to.int('rgb(0,255,0)')\r\n         * // output: 65280\r\n         *\r\n         * @param      {string} cssrgb    Rgba string\r\n         * @return     {number}\r\n         */\r\n        int: cssrgb => {\r\n            let [m,r,g,b] = REG_RGB.exec(cssrgb) || [];\r\n\r\n            return m ?\r\n                  (parseInt(r) << 16)\r\n                + (parseInt(g) << 8)\r\n                + parseInt(b)\r\n            : null;\r\n        },\r\n\r\n        /**\r\n         * Rgb functional notation string `'rgb(RRR,GGG,BBB)'` to hexadecimal string `'#RRGGBB'`. Alpha is ignored.\r\n         *\r\n         * @memberof colorutil.cssrgb.to\r\n         *\r\n         * @example\r\n         * colorutil.cssrgb.to.hex('rgb(0,255,0)')\r\n         * // output: \"#00ff00\"\r\n         *\r\n         * @param      {string} cssrgb    Rgb string\r\n         * @return     {string}\r\n         */\r\n        hex: cssrgb => {\r\n            let [m,r,g,b] = REG_RGB.exec(cssrgb) || [];\r\n\r\n            return m ?\r\n                '#' + ((1 << 24)\r\n                    + (parseInt(r) << 16)\r\n                    + (parseInt(g) << 8)\r\n                    + parseInt(b)).toString(16).slice(1)\r\n            : null;\r\n        }\r\n    }\r\n}","\r\nimport Rgb from './Rgb';\r\n\r\nconst REG_RGBA = /^rgba?\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d*\\.?\\d*)\\s*\\)$/;\r\n\r\n/**\r\n * cssrgba conversion functions\r\n *\r\n * cssrgba notation is `'rgba(RRR,GGG,BBB,A)'`\r\n *\r\n * @namespace cssrgba\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'cssrgba',\r\n    className: 'Cssrgba',\r\n    parent: Rgb,\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.cssrgba\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    test: color => {\r\n        return typeof color === 'string' && !!REG_RGBA.exec(color);\r\n    },\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.cssrgba\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * Rgba functional notation string `'rgba(RRR,GGG,BBB,A)'` to rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @memberof colorutil.cssrgba.to\r\n         *\r\n         * @example\r\n         * colorutil.cssrgba.to.rgb('rgba(0,255,0,0.5)')\r\n         * // output: {r: 0, g: 255, b: 0, a: 127}\r\n\r\n         * @param      {string} cssrgba    Rgba string\r\n         * @return     {Object}\r\n         */\r\n        rgb: cssrgba => {\r\n            let [m,r,g,b,a] = REG_RGBA.exec(cssrgba) || [];\r\n\r\n            return m ? {\r\n                    r: parseInt(r),\r\n                    g: parseInt(g),\r\n                    b: parseInt(b),\r\n                    a: a ? (parseFloat(a) * 0xFF) | 0 : 0xFF\r\n                }\r\n            : null;\r\n        },\r\n\r\n        /**\r\n         * Rgba functional notation string `'rgba(RRR,GGG,BBB,A)'` to 24-bit integer `0xRRGGBB`. Alpha is ignored.\r\n         *\r\n         * @memberof colorutil.cssrgba.to\r\n         *\r\n         * @example\r\n         * colorutil.cssrgba.to.int('rgba(0,255,0,0.5)')\r\n         * // output: 65280\r\n         *\r\n         * @param      {string} cssrgba    Rgba string\r\n         * @return     {number}\r\n         */\r\n        int: cssrgba => {\r\n            let [m,r,g,b] = REG_RGBA.exec(cssrgba) || [];\r\n\r\n            return m ?\r\n                  (parseInt(r) << 16)\r\n                + (parseInt(g) << 8)\r\n                + parseInt(b)\r\n            : null;\r\n        },\r\n\r\n        /**\r\n         * Rgba functional notation string `'rgba(RRR,GGG,BBB,A)'` to hexadecimal string `'#RRGGBB'`. Alpha is ignored.\r\n         *\r\n         * @memberof colorutil.cssrgba.to\r\n         *\r\n         * @example\r\n         * colorutil.cssrgba.to.hex('rgba(0,255,0,0.5)')\r\n         * // output: \"#00ff00\"\r\n         *\r\n         * @param      {string} cssrgba    Rgba string\r\n         * @return     {string}\r\n         */\r\n        hex: cssrgba => {\r\n            let [m,r,g,b] = REG_RGBA.exec(cssrgba) || [];\r\n\r\n            return m ?\r\n                '#' + ((1 << 24)\r\n                    + (parseInt(r) << 16)\r\n                    + (parseInt(g) << 8)\r\n                    + parseInt(b)).toString(16).slice(1)\r\n            : null;\r\n        }\r\n    }\r\n}","\r\nimport Hsl from './Hsl';\r\n\r\nconst REG_HSL = /^hsla?\\s*\\(\\s*(\\d{1,3}\\s*)\\s*,\\s*(\\d{1,3}\\s*)(%)\\s*,\\s*(\\d{1,3}\\s*)(%)\\s*\\)$/;\r\n\r\n/**\r\n * csshsl conversion functions\r\n *\r\n * Hsl functional notation is `'hsl(HHH,SSS%,LLL%)'`\r\n *\r\n * @namespace csshsl\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'csshsl',\r\n    className: 'Csshsl',\r\n    parent: Hsl,\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.csshsl\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    test: color => {\r\n        return typeof color === 'string' && !!REG_HSL.exec(color);\r\n    },\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.csshsl\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * Hsl functional notation string `'hsl(HHH,SSS%,LLL%)'` to hsl object `{h:H, s:S, l:L, a:A}`\r\n         *\r\n         * @memberof colorutil.csshsl.to\r\n         *\r\n         * @example\r\n         * colorutil.csshsl.to.hsl('hsl(180, 50%, 60%)');\r\n         * // output: {h: 0.5, s: 0.5, l: 0.6, a: 1}\r\n         *\r\n         * @param      {string} csshsl    Hsl string\r\n         * @param      {number} [a=1]        Alpha value in range 0-1\r\n         * @return     {Object}\r\n         */\r\n        hsl: (csshsl, a=1) => {\r\n            let [m,h,s,p1,l] = REG_HSL.exec(csshsl) || [];\r\n\r\n            return m ? {\r\n                    h: parseInt(h) / 360,\r\n                    s: parseInt(s) / 100,\r\n                    l: parseInt(l) / 100,\r\n                    a: a\r\n                }\r\n            : null;\r\n        }\r\n    }\r\n};","\r\nimport Hsl from './Hsl';\r\n\r\nconst REG_HSLA = /^hsla?\\s*\\(\\s*(\\d{1,3}\\s*)\\s*,\\s*(\\d{1,3}\\s*)(%)\\s*,\\s*(\\d{1,3}\\s*)(%)\\s*,\\s*(\\d*\\.?\\d*)\\s*\\)$/;\r\n\r\n/**\r\n * csshsla conversion functions\r\n *\r\n * Hsla functional notation is `'hsla(HHH,SSS%,LLL%,A)'`\r\n *\r\n * @namespace csshsla\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'csshsla',\r\n    className: 'Csshsla',\r\n    parent: Hsl,\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.csshsla\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    test: color => {\r\n        return typeof color === 'string' && !!REG_HSLA.exec(color);\r\n    },\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.csshsla\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * Hsl functional notation string `'hsla(HHH,SSS%,LLL%,A)'` to hsl object `{h:H, s:S, l:L, a:A}`\r\n         *\r\n         * @memberof colorutil.csshsla.to\r\n         *\r\n         * @example\r\n         * colorutil.csshsla.to.hsl('hsla(180, 50%, 60%, 0.5)');\r\n         * // output: {h: 0.5, s: 0.5, l: 0.6, a: 0.5}\r\n         *\r\n         * @param      {string} csshsla    Hsl string\r\n         * @return     {Object}\r\n         */\r\n        hsl: csshsla => {\r\n            let [m,h,s,p1,l,p2,a] = REG_HSLA.exec(csshsla) || [];\r\n\r\n            return m ? {\r\n                    h: parseInt(h) / 360,\r\n                    s: parseInt(s) / 100,\r\n                    l: parseInt(l) / 100,\r\n                    a: a ? parseFloat(a) : 1\r\n                }\r\n            : null;\r\n        }\r\n    }\r\n}","\r\nimport Rgb from './Rgb.js';\r\nimport Gradient from '../Gradient';\r\nimport GradientData from '../gradientData/GradientData';\r\nimport { getCanvasGradient, getCanvasTarget } from './shared.js';\r\n\r\nconst DEFAULT_COLOR = {\r\n    h: 0,\r\n    s: 0,\r\n    v: 0,\r\n    a: 1\r\n};\r\n\r\n/**\r\n * Hsv conversion functions\r\n *\r\n * Hsv notation is `{h:H, s:S, v:V, a:A}` where each component\r\n * (hue, saturation, value, alpha) are in range 0-1.\r\n *\r\n * @namespace hsv\r\n * @memberof colorutil\r\n */\r\nlet Hsv = new function() {\r\n\r\n    this.name = 'hsv';\r\n    this.className = 'Hsv';\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Test validity of a color whether it is in correct notation for this class.\r\n     *\r\n     * @memberof colorutil.hsv\r\n     *\r\n     * @param      {*}          color   The color\r\n     * @return     {boolean}    True if valid, False otherwise.\r\n     */\r\n    this.test = color => {\r\n        return color !== null &&\r\n            typeof color === 'object' &&\r\n            color.hasOwnProperty('h') &&\r\n            color.hasOwnProperty('s') &&\r\n            color.hasOwnProperty('v') &&\r\n            (color.h >= 0 && color.h <= 1) &&\r\n            (color.s >= 0 && color.s <= 1) &&\r\n            (color.v >= 0 && color.v <= 1) &&\r\n            (color.hasOwnProperty('a') ? (color.a >= 0 && color.a <= 1) : true);\r\n    },\r\n\r\n    /**\r\n     * Creates a gradient.\r\n     *\r\n     * @memberof colorutil.hsv\r\n     *\r\n     * @param      {Object}    options                              Options provided by user\r\n     * @param      {Array|GradientData}     options.colors          Array of colors or instance of GradientData. There are multiple types of data structures. Data structure\r\n     *                                                              defines whether the gradient is one or two-dimensional.\r\n     * @param      {string}    [options.type='linear']              Gradient type: linear | circular\r\n     * @param      {boolean}   [options.verify=false]               Verify that each of the colors in colors property have valid data structure.\r\n     *                                                              If set to true, createGradient will throw an error if data structure is not correct.\r\n     *                                                              Data structure is tested from one sample to identify the data structure. This does not\r\n     *                                                              affect that behavior.\r\n     * @param      {boolean}   [options.validate=true]              Validate and add missing color stops and convert colors data structure to internal data structure\r\n     * @param      {function}  [options.defaultColor={h:0,s:0,v:0,a:1}] Default color used to fill the missing color components in gradient colors.\r\n     *                                                              If options.colors is GradientData, specify the defaultColor for GradientData instead.\r\n     * @param      {number}    [options.width=100]                  Set size of the gradient in pixels.\r\n     * @param      {number}    [options.height=100]                 Set size of the gradient in pixels.\r\n     * @param      {number}    [options.centerX=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the left edge of the gradient and 1 is the right edge.\r\n     *                                                              centerX can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.centerY=0]                  Center position of a gradient. Value in range 0 to 1 where 0 is the top edge of the gradient and 1 is the bottom edge.\r\n     *                                                              centerY can be used with linear type of gradients to set point of rotation.\r\n     * @param      {number}    [options.scale=1]                    Scale of the gradient. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleX=1]                   Scale of the gradient on x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.scaleY=1]                   Scale of the gradient on y axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateX=0]               Translate gradient along x axis. Value in range 0 to 1.\r\n     * @param      {number}    [options.translateY=0]               Translate gradient along y axis. Value in range 0 to 1.\r\n     * @param      {boolean}   [options.centralize=false]           Overrides translate values and automatically adjusts the positioning to the center.\r\n     * @param      {number}    [options.rotation=0]                 Rotation of the gradient. Value in range 0 to 1.\r\n     * @param      {function}  [options.repeatX=colorutil.repeat.repeat] X repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     * @param      {function}  [options.repeatY=colorutil.repeat.repeat] Y repetition of gradient when calculating a color that is out of normal range 0 to 1.\r\n     *\r\n     * @return     {function}  Function that calculates a color for a single point on gradient. Accepts x and y parameters.\r\n     *                         Though the x and y may exceed the limit, but gradient repeat will take effect.\r\n     */\r\n    this.gradient = options => {\r\n\r\n        return Gradient.createGradient(options, {\r\n\r\n            mixColors: mixColors,\r\n            defaultColor: DEFAULT_COLOR\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a gradient data object which allows conversion\r\n     * between the supported data structures\r\n     *\r\n     * @memberof colorutil.hsv\r\n     *\r\n     * @param      {Array}          data            Array of colors. There are multiple types of data structures.\r\n     * @param      {Object}         [defaultColor={h:0,s:0,v:0,a:1}]  The default color\r\n     * @return     {GradientData}\r\n     */\r\n    this.gradientData = (data, defaultColor) => {\r\n\r\n        defaultColor = defaultColor || DEFAULT_COLOR;\r\n\r\n        return new GradientData(data, defaultColor);\r\n    };\r\n\r\n\r\n    /**\r\n     * Draw a gradient on canvas\r\n     *\r\n     * @param      {HTMLCanvasElement|string}   target   The canvas on which gradient is drawn. Target may be canvas or css selector to canvas (evaluated with querySelector)\r\n     * @param      {Object|Function}            options  Options of gradient or gradient function\r\n     */\r\n    this.draw = (target, options) => {\r\n\r\n        let gradient = getCanvasGradient(this, options);\r\n        let canvas = getCanvasTarget(target);\r\n\r\n        if (canvas && gradient) {\r\n\r\n            let width = canvas.width;\r\n            let height = canvas.height;\r\n            let ctx = canvas.getContext('2d');\r\n            let imageData  = ctx.createImageData(width, height);\r\n            let buffer = imageData.data.buffer;\r\n            let uint32View = new Uint32Array(buffer);\r\n            let uint8CView = new Uint8ClampedArray(buffer);\r\n\r\n            for (let x = 0; x < width; x++) {\r\n\r\n                for (let y = 0; y < height; y++) {\r\n\r\n                    let hsv = gradient(x, y);\r\n                    let rgb = this.to.rgb(hsv);\r\n\r\n                    uint32View[y * width + x] = Rgb.to.intabgr(rgb);\r\n                }\r\n            }\r\n\r\n            imageData.data.set(uint8CView);\r\n\r\n            ctx.putImageData(imageData, 0, 0);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.hsv\r\n     */\r\n    this.to = {\r\n\r\n        /**\r\n         * Hsv object `{h:H, s:S, v:V, a:A}` to rgb object `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @example\r\n         * colorutil.hsv.to.rgb({h: 0, s: 1, v: 1});\r\n         * // output: {r: 255, g: 0, b: 0, a: 255}\r\n         * colorutil.hsv.to.rgb({h: 0, s: 1, v: 1, a: 0.5});\r\n         * // output: {r: 255, g: 0, b: 0, a: 128}\r\n         *\r\n         * @memberof colorutil.hsv.to\r\n         *\r\n         * @param      {Object}  hsv        Hsv object\r\n         * @return     {Object}\r\n         */\r\n        rgb: hsv => {\r\n            let {h:h, s:s, v:v, a:a} = hsv;\r\n            let c = v * s\r\n            let x = c * (1 - Math.abs(h * 6 % 2 - 1));\r\n            let m = v - c;\r\n            let r, g, b;\r\n\r\n            if (h < 1/6) {\r\n                [r, g, b] = [c, x, 0];\r\n\r\n            } else if (h < 2/6) {\r\n                [r, g, b] = [x, c, 0];\r\n\r\n            } else if (h < 3/6) {\r\n                [r, g, b] = [0, c, x];\r\n\r\n            } else if (h < 4/6) {\r\n                [r, g, b] = [0, x, c];\r\n\r\n            } else if (h < 5/6) {\r\n                [r, g, b] = [x, 0, c];\r\n\r\n            } else {\r\n                [r, g, b] = [c, 0, x];\r\n            }\r\n\r\n            return {\r\n                r: (r + m) * 0xFF,\r\n                g: (g + m) * 0xFF,\r\n                b: (b + m) * 0xFF,\r\n                a: !isNaN(parseFloat(a)) ? a * 0xFF : 0xFF\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Hsv object `{h:H, s:S, v:V, a:A}` to hsl object `{h:H, s:S, l:L, a:A}`\r\n         *\r\n         * @example\r\n         * colorutil.hsv.to.hsl({h: 1/6, s: 0.5, v: 0.5});\r\n         * // output: {h: 0.16666666666666666, s: 0.3333333333333333, l: 0.375, a: 1}\r\n         *\r\n         * @memberof colorutil.hsv.to\r\n         *\r\n         * @param      {Object}  hsv        Hsl object\r\n         * @return     {Object}\r\n         */\r\n        hsl: hsv => {\r\n            let {h:h, s:s, v:v, a:a} = hsv;\r\n\r\n            let l = 0.5 * v * (2 - s);\r\n\r\n            s = v * s / (1 - Math.abs(2 * l - 1));\r\n\r\n            return {\r\n                h: h,\r\n                s: s,\r\n                l: l,\r\n                a: a === undefined ? 1 : a\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nfunction mixColors(color1, color2, position) {\r\n\r\n    return {\r\n        h: color1.h - position * (color1.h - color2.h),\r\n        s: color1.s - position * (color1.s - color2.s),\r\n        v: color1.v - position * (color1.v - color2.v),\r\n        a: color1.a - position * (color1.a - color2.a)\r\n    }\r\n};\r\n\r\nexport default Hsv;","\r\nimport Rgb from './Rgb';\r\n\r\n/**\r\n * Number conversion functions.\r\n *\r\n * Int32 notation converion functions for 32-bit numbers `0xAABBGGRR` (little-endian).\r\n *\r\n * @namespace intabgr\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'intabgr',\r\n    className: 'Intabgr',\r\n    parent: Rgb,\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.intabgr\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * 32-bit number `0xAABBGGRR` (little-endian) to rgb `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @memberof colorutil.intabgr.to\r\n         *\r\n         * @example\r\n         * colorutil.intabgr.to.rgb(0xFF112233)\r\n         * // output: {a: 255, b: 17, g: 34, r: 51}\r\n         *\r\n         * @param      {number}  int        32-bit number\r\n         * @return     {Object}\r\n         */\r\n        rgb: (int) => {\r\n            return {\r\n                a: (int >> 24) & 0xFF,\r\n                b: (int >> 16) & 0xFF,\r\n                g: (int >> 8) & 0xFF,\r\n                r: int & 0xFF\r\n            };\r\n        }\r\n    }\r\n};","\r\nimport Rgb from './Rgb';\r\n\r\n/**\r\n * Number conversion functions.\r\n *\r\n * Int32 notation converion functions for 32-bit numbers `0xRRGGBBAA` (big-endian).\r\n *\r\n * @namespace intrgba\r\n * @memberof colorutil\r\n */\r\nexport default {\r\n\r\n    name: 'intrgba',\r\n    className: 'Intrgba',\r\n    parent: Rgb,\r\n\r\n    /**\r\n     * @namespace to\r\n     * @memberof colorutil.intrgba\r\n     */\r\n    to: {\r\n\r\n        /**\r\n         * 32-bit number `0xRRGGBBAA` (big-endian) to rgb `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n         *\r\n         * @memberof colorutil.intrgba.to\r\n         *\r\n         * @example\r\n         * colorutil.intrgba.to.rgb(0xFF112233)\r\n         * // output: {r: 255, g: 17, b: 34, a: 51}\r\n         *\r\n         * @param      {number}  int        32-bit number\r\n         * @return     {Object}\r\n         */\r\n        rgb: (int) => {\r\n            return {\r\n                r: (int >> 24) & 0xFF,\r\n                g: (int >> 16) & 0xFF,\r\n                b: (int >> 8) & 0xFF,\r\n                a: int & 0xFF\r\n            };\r\n        }\r\n    }\r\n};","\r\nimport _ from '../Utils';\r\nimport ConversionUtil from '../ConversionUtil';\r\nimport {TYPES} from './types';\r\n\r\nlet Any = {to:{}};\r\n\r\n_.forEach(TYPES, (type) => {\r\n\r\n    let name = _.lowerFirst(type.name);\r\n\r\n    Any.to[name] = (color) => {\r\n\r\n        return ConversionUtil.convertAny(color, type, TYPES);\r\n    };\r\n});\r\n\r\nexport default Any;\r\n\r\n/**\r\n * Any conversion functions.\r\n *\r\n * Converts color notations to any notation. (Except for Intrgba and Int32ABGR)\r\n *\r\n * The any conversion functions provide an easy way to convert to specific notation\r\n * without knowing the notation of a source color. This is just a collection of\r\n * convenience methods making the usage a little bit easier. These functions are not\r\n * as fast as the direct conversion functions.\r\n *\r\n * @namespace any\r\n * @memberof colorutil\r\n */\r\n\r\n/**\r\n * @namespace to\r\n * @memberof colorutil.any\r\n */\r\n\r\n/**\r\n * Convert any color to rgb object notation `{r:RRR, g:GGG, b:BBB, a:AAA}`\r\n *\r\n * @example\r\n * colorutil.any.to.rgb(0xFF0000);\r\n * // output: {r: 255, g: 0, b: 0, a: 255}\r\n *\r\n * colorutil.any.to.rgb({h: 1/6, s: 0.5, l: 0.5});\r\n * // output: {r: 191, g: 191, b: 64, a: 255}\r\n *\r\n * @name rgb\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {Object}\r\n */\r\n\r\n/**\r\n * Convert any color to number notation `0xRRGGBB`\r\n *\r\n * @example\r\n * colorutil.any.to.int('hsl(180, 50%, 60%)');\r\n * // output: 6737100\r\n *\r\n * @name int\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {number}\r\n */\r\n\r\n/**\r\n * Convert any color to hex notation `'#RRGGBB'`\r\n *\r\n * @example\r\n * colorutil.any.to.hex('hsl(180, 50%, 60%)');\r\n * // output: \"#66cccc\"\r\n *\r\n * @name hex\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {string}\r\n */\r\n\r\n/**\r\n * Convert any color to rgb functional notation `'rgb(RRR,GGG,BBB)'`\r\n *\r\n * @example\r\n * colorutil.any.to.cssrgb('hsl(180, 50%, 60%)');\r\n * // output: \"rgb(102,204,204)\"\r\n *\r\n * @name cssrgb\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {string}\r\n */\r\n\r\n/**\r\n * Convert any color to rgb functional notation `'rgba(RRR,GGG,BBB,A)'`\r\n *\r\n * @example\r\n * colorutil.any.to.cssrgba('hsl(180, 50%, 60%)');\r\n * // output: \"rgba(102,204,204,1)\"\r\n *\r\n * @name cssrgba\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {string}\r\n */\r\n\r\n/**\r\n * Convert any color to hsl object notation `{h:H, s:S, v:V, a:A}`\r\n *\r\n * @example\r\n * colorutil.any.to.hsl('hsl(180, 50%, 60%)');\r\n * // output: {h: 0.5, s: 0.5, l: 0.6, a: 1}\r\n *\r\n * @name hsl\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {Object}\r\n */\r\n\r\n/**\r\n * Convert any color to hsv object notation `{h:H, s:S, v:V, a:A}`\r\n *\r\n * @example\r\n * colorutil.any.to.hsv('hsl(180, 50%, 60%)');\r\n * // output: {h: 0.5, s: 0.5000000000000001, v: 0.8, a: 1}\r\n *\r\n * @name hsv\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {Object}\r\n */\r\n\r\n/**\r\n * Convert any color to hsl functional notation string `'hsl(HHH,SSS%,LLL%)'`\r\n *\r\n * @example\r\n * colorutil.any.csshsl({h: 0.5, s: 0.5, l: 0.6, a: 1});\r\n * // output: \"hsl(180,50%,60%)\"\r\n *\r\n * @name csshsl\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {string}\r\n */\r\n\r\n/**\r\n * Convert any color to hsl functional notation string `'hsla(HHH,SSS%,LLL%,A)'`\r\n *\r\n * @example\r\n * colorutil.any.csshsla({h: 0.5, s: 0.5, l: 0.6, a: 1});\r\n * // output: \"hsla(180,50%,60%,1)\"\r\n *\r\n * @name csshsla\r\n * @memberof colorutil.any.to\r\n *\r\n * @param      {Object}  color        Color in any notation\r\n * @return     {string}\r\n */\r\n"],"sourceRoot":""}